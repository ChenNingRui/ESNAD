{"remainingRequest":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/iview/src/components/date-picker/picker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/iview/src/components/date-picker/picker.vue","mtime":1556265491000},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js","mtime":1561201328360},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/babel-loader/lib/index.js","mtime":1561201328233},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js","mtime":1561201328360},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/vue-loader/lib/index.js","mtime":1561201333247}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\nimport iInput from '../../components/input/input.vue';\nimport Drop from '../../components/select/dropdown.vue';\nimport Icon from '../../components/icon/icon.vue';\nimport {directive as clickOutside} from 'v-click-outside-x';\nimport TransferDom from '../../directives/transfer-dom';\nimport { oneOf } from '../../utils/assist';\nimport { DEFAULT_FORMATS, TYPE_VALUE_RESOLVER_MAP, getDayCountOfMonth } from './util';\nimport {findComponentsDownward} from '../../utils/assist';\nimport Emitter from '../../mixins/emitter';\n\nconst prefixCls = 'ivu-date-picker';\nconst pickerPrefixCls = 'ivu-picker';\n\nconst isEmptyArray = val => val.reduce((isEmpty, str) => isEmpty && !str || (typeof str === 'string' && str.trim() === ''), true);\nconst keyValueMapper = {\n    40: 'up',\n    39: 'right',\n    38: 'down',\n    37: 'left',\n};\n\nconst mapPossibleValues = (key, horizontal, vertical) => {\n    if (key === 'left') return horizontal * -1;\n    if (key === 'right') return horizontal * 1;\n    if (key === 'up') return vertical * 1;\n    if (key === 'down') return vertical * -1;\n};\n\nconst pulseElement = (el) => {\n    const pulseClass = 'ivu-date-picker-btn-pulse';\n    el.classList.add(pulseClass);\n    setTimeout(() => el.classList.remove(pulseClass), 200);\n};\n\nconst extractTime = date => {\n    if (!date) return [0, 0, 0];\n    return [\n        date.getHours(), date.getMinutes(), date.getSeconds()\n    ];\n};\n\n\nexport default {\n    mixins: [ Emitter ],\n    components: { iInput, Drop, Icon },\n    directives: { clickOutside, TransferDom },\n    props: {\n        format: {\n            type: String\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        editable: {\n            type: Boolean,\n            default: true\n        },\n        clearable: {\n            type: Boolean,\n            default: true\n        },\n        confirm: {\n            type: Boolean,\n            default: false\n        },\n        open: {\n            type: Boolean,\n            default: null\n        },\n        multiple: {\n            type: Boolean,\n            default: false\n        },\n        timePickerOptions: {\n            default: () => ({}),\n            type: Object,\n        },\n        splitPanels: {\n            type: Boolean,\n            default: false\n        },\n        showWeekNumbers: {\n            type: Boolean,\n            default: false\n        },\n        startDate: {\n            type: Date\n        },\n        size: {\n            validator (value) {\n                return oneOf(value, ['small', 'large', 'default']);\n            },\n            default () {\n                return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n            }\n        },\n        placeholder: {\n            type: String,\n            default: ''\n        },\n        placement: {\n            validator (value) {\n                return oneOf(value, ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end']);\n            },\n            default: 'bottom-start'\n        },\n        transfer: {\n            type: Boolean,\n            default () {\n                return !this.$IVIEW || this.$IVIEW.transfer === '' ? false : this.$IVIEW.transfer;\n            }\n        },\n        name: {\n            type: String\n        },\n        elementId: {\n            type: String\n        },\n        steps: {\n            type: Array,\n            default: () => []\n        },\n        value: {\n            type: [Date, String, Array]\n        },\n        options: {\n            type: Object,\n            default: () => ({})\n        },\n        separator: {\n            type: String,\n            default: ' - '\n        }\n    },\n    data(){\n        const isRange = this.type.includes('range');\n        const emptyArray = isRange ? [null, null] : [null];\n        const initialValue = isEmptyArray((isRange ? this.value : [this.value]) || []) ? emptyArray : this.parseDate(this.value);\n        const focusedTime = initialValue.map(extractTime);\n\n        return {\n            prefixCls: prefixCls,\n            showClose: false,\n            visible: false,\n            internalValue: initialValue,\n            disableClickOutSide: false,    // fixed when click a date,trigger clickoutside to close picker\n            disableCloseUnderTransfer: false,  // transfer 模式下，点击Drop也会触发关闭,\n            selectionMode: this.onSelectionModeChange(this.type),\n            forceInputRerender: 1,\n            isFocused: false,\n            focusedDate: initialValue[0] || this.startDate || new Date(),\n            focusedTime: {\n                column: 0, // which column inside the picker\n                picker: 0, // which picker\n                time: focusedTime, // the values array into [hh, mm, ss],\n                active: false\n            },\n            internalFocus: false,\n        };\n    },\n    computed: {\n        wrapperClasses(){\n            return [prefixCls, {\n                [prefixCls + '-focused']: this.isFocused\n            }];\n        },\n        publicVModelValue(){\n            if (this.multiple){\n                return this.internalValue.slice();\n            } else {\n                const isRange = this.type.includes('range');\n                let val = this.internalValue.map(date => date instanceof Date ? new Date(date) : (date || ''));\n\n                if (this.type.match(/^time/)) val = val.map(this.formatDate);\n                return (isRange || this.multiple) ? val : val[0];\n            }\n        },\n        publicStringValue(){\n            const {formatDate, publicVModelValue, type} = this;\n            if (type.match(/^time/)) return publicVModelValue;\n            if (this.multiple) return formatDate(publicVModelValue);\n            return Array.isArray(publicVModelValue) ? publicVModelValue.map(formatDate) : formatDate(publicVModelValue);\n        },\n        opened () {\n            return this.open === null ? this.visible : this.open;\n        },\n        transition () {\n            const bottomPlaced = this.placement.match(/^bottom/);\n            return bottomPlaced ? 'slide-up' : 'slide-down';\n        },\n        visualValue() {\n            return this.formatDate(this.internalValue);\n        },\n        isConfirm(){\n            return this.confirm || this.type === 'datetime' || this.type === 'datetimerange' || this.multiple;\n        },\n        // 3.4.0, global setting customArrow 有值时，arrow 赋值空\n        arrowType () {\n            let type = '';\n\n            if (this.type === 'time' || this.type === 'timerange') {\n                type = 'ios-time-outline';\n\n                if (this.$IVIEW) {\n                    if (this.$IVIEW.timePicker.customIcon) {\n                        type = '';\n                    } else if (this.$IVIEW.timePicker.icon) {\n                        type = this.$IVIEW.timePicker.icon;\n                    }\n                }\n            } else {\n                type = 'ios-calendar-outline';\n\n                if (this.$IVIEW) {\n                    if (this.$IVIEW.datePicker.customIcon) {\n                        type = '';\n                    } else if (this.$IVIEW.datePicker.icon) {\n                        type = this.$IVIEW.datePicker.icon;\n                    }\n                }\n            }\n\n            if (this.showClose) type = 'ios-close-circle';\n\n            return type;\n        },\n        // 3.4.0, global setting\n        customArrowType () {\n            let type = '';\n\n            if (!this.showClose) {\n                if (this.type === 'time' || this.type === 'timerange') {\n                    if (this.$IVIEW) {\n                        if (this.$IVIEW.timePicker.customIcon) {\n                            type = this.$IVIEW.timePicker.customIcon;\n                        }\n                    }\n                } else {\n                    if (this.$IVIEW) {\n                        if (this.$IVIEW.datePicker.customIcon) {\n                            type = this.$IVIEW.datePicker.customIcon;\n                        }\n                    }\n                }\n            }\n\n            return type;\n        },\n        // 3.4.0, global setting\n        arrowSize () {\n            let size = '';\n\n            if (!this.showClose) {\n                if (this.type === 'time' || this.type === 'timerange') {\n                    if (this.$IVIEW) {\n                        if (this.$IVIEW.timePicker.iconSize) {\n                            size = this.$IVIEW.timePicker.iconSize;\n                        }\n                    }\n                } else {\n                    if (this.$IVIEW) {\n                        if (this.$IVIEW.datePicker.iconSize) {\n                            size = this.$IVIEW.datePicker.iconSize;\n                        }\n                    }\n                }\n            }\n\n            return size;\n        }\n    },\n    methods: {\n        onSelectionModeChange(type){\n            if (type.match(/^date/)) type = 'date';\n            this.selectionMode = oneOf(type, ['year', 'month', 'date', 'time']) && type;\n            return this.selectionMode;\n        },\n        // 开启 transfer 时，点击 Drop 即会关闭，这里不让其关闭\n        handleTransferClick () {\n            if (this.transfer) this.disableCloseUnderTransfer = true;\n        },\n        handleClose (e) {\n            if (this.disableCloseUnderTransfer) {\n                this.disableCloseUnderTransfer = false;\n                return false;\n            }\n\n            if (e && e.type === 'mousedown' && this.visible) {\n                e.preventDefault();\n                e.stopPropagation();\n                return;\n            }\n\n            if (this.visible) {\n                const pickerPanel = this.$refs.pickerPanel && this.$refs.pickerPanel.$el;\n                if (e && pickerPanel && pickerPanel.contains(e.target)) return; // its a click inside own component, lets ignore it.\n\n                this.visible = false;\n                e && e.preventDefault();\n                e && e.stopPropagation();\n                this.$emit('on-clickoutside', e);\n                return;\n            }\n\n            this.isFocused = false;\n            this.disableClickOutSide = false;\n        },\n        handleFocus (e) {\n            if (this.readonly) return;\n            this.isFocused = true;\n            if (e && e.type === 'focus') return; // just focus, don't open yet\n            if(!this.disabled){\n                this.visible = true;\n            }\n        },\n        handleBlur (e) {\n            if (this.internalFocus){\n                this.internalFocus = false;\n                return;\n            }\n            if (this.visible) {\n                e.preventDefault();\n                return;\n            }\n\n            this.isFocused = false;\n            this.onSelectionModeChange(this.type);\n            this.internalValue = this.internalValue.slice(); // trigger panel watchers to reset views\n            this.reset();\n            this.$refs.pickerPanel.onToggleVisibility(false);\n\n        },\n        handleKeydown(e){\n            const keyCode = e.keyCode;\n\n            // handle \"tab\" key\n            if (keyCode === 9){\n                if (this.visible){\n                    e.stopPropagation();\n                    e.preventDefault();\n\n                    if (this.isConfirm){\n                        const selector = `.${pickerPrefixCls}-confirm > *`;\n                        const tabbable = this.$refs.drop.$el.querySelectorAll(selector);\n                        this.internalFocus = true;\n                        const element = [...tabbable][e.shiftKey ? 'pop' : 'shift']();\n                        element.focus();\n                    } else {\n                        this.handleClose();\n                    }\n                } else {\n                    this.focused = false;\n                }\n            }\n\n            // open the panel\n            const arrows = [37, 38, 39, 40];\n            if (!this.visible && arrows.includes(keyCode)){\n                this.visible = true;\n                return;\n            }\n\n            // close on \"esc\" key\n            if (keyCode === 27){\n                if (this.visible) {\n                    e.stopPropagation();\n                    this.handleClose();\n                }\n            }\n\n            // select date, \"Enter\" key\n            if (keyCode === 13){\n                const timePickers = findComponentsDownward(this, 'TimeSpinner');\n                if (timePickers.length > 0){\n                    const columnsPerPicker = timePickers[0].showSeconds ? 3 : 2;\n                    const pickerIndex = Math.floor(this.focusedTime.column / columnsPerPicker);\n                    const value = this.focusedTime.time[pickerIndex];\n\n                    timePickers[pickerIndex].chooseValue(value);\n                    return;\n                }\n\n                if (this.type.match(/range/)){\n                    this.$refs.pickerPanel.handleRangePick(this.focusedDate, 'date');\n                } else {\n                    const panels = findComponentsDownward(this, 'PanelTable');\n                    const compareDate = (d) => {\n                        const sliceIndex = ['year', 'month', 'date'].indexOf((this.type)) + 1;\n                        return [d.getFullYear(), d.getMonth(), d.getDate()].slice(0, sliceIndex).join('-');\n                    };\n                    const dateIsValid = panels.find(({cells}) => {\n                        return cells.find(({date, disabled}) => compareDate(date) === compareDate(this.focusedDate) && !disabled);\n                    });\n                    if (dateIsValid) this.onPick(this.focusedDate, false, 'date');\n                }\n            }\n\n            if (!arrows.includes(keyCode)) return; // ignore rest of keys\n\n            // navigate times and dates\n            if (this.focusedTime.active) e.preventDefault(); // to prevent cursor from moving\n            this.navigateDatePanel(keyValueMapper[keyCode], e.shiftKey);\n        },\n        reset(){\n            this.$refs.pickerPanel.reset && this.$refs.pickerPanel.reset();\n        },\n        navigateTimePanel(direction){\n\n            this.focusedTime.active = true;\n            const horizontal = direction.match(/left|right/);\n            const vertical = direction.match(/up|down/);\n            const timePickers = findComponentsDownward(this, 'TimeSpinner');\n\n            const maxNrOfColumns = (timePickers[0].showSeconds ? 3 : 2) * timePickers.length;\n            const column = (currentColumn => {\n                const incremented = currentColumn + (horizontal ? (direction === 'left' ? -1 : 1) : 0);\n                return (incremented + maxNrOfColumns) % maxNrOfColumns;\n            })(this.focusedTime.column);\n\n            const columnsPerPicker = maxNrOfColumns / timePickers.length;\n            const pickerIndex = Math.floor(column / columnsPerPicker);\n            const col = column % columnsPerPicker;\n\n\n            if (horizontal){\n                const time = this.internalValue.map(extractTime);\n\n                this.focusedTime = {\n                    ...this.focusedTime,\n                    column: column,\n                    time: time\n                };\n                timePickers.forEach((instance, i) => {\n                    if (i === pickerIndex) instance.updateFocusedTime(col, time[pickerIndex]);\n                    else instance.updateFocusedTime(-1, instance.focusedTime);\n                });\n            }\n\n            if (vertical){\n                const increment = direction === 'up' ? 1 : -1;\n                const timeParts = ['hours', 'minutes', 'seconds'];\n\n\n                const pickerPossibleValues = timePickers[pickerIndex][`${timeParts[col]}List`];\n                const nextIndex = pickerPossibleValues.findIndex(({text}) => this.focusedTime.time[pickerIndex][col] === text) + increment;\n                const nextValue = pickerPossibleValues[nextIndex % pickerPossibleValues.length].text;\n                const times = this.focusedTime.time.map((time, i) => {\n                    if (i !== pickerIndex) return time;\n                    time[col] = nextValue;\n                    return time;\n                });\n                this.focusedTime = {\n                    ...this.focusedTime,\n                    time: times\n                };\n\n                timePickers.forEach((instance, i) => {\n                    if (i === pickerIndex) instance.updateFocusedTime(col, times[i]);\n                    else instance.updateFocusedTime(-1, instance.focusedTime);\n                });\n            }\n        },\n        navigateDatePanel(direction, shift){\n\n            const timePickers = findComponentsDownward(this, 'TimeSpinner');\n            if (timePickers.length > 0) {\n                // we are in TimePicker mode\n                this.navigateTimePanel(direction, shift, timePickers);\n                return;\n            }\n\n            if (shift){\n                if (this.type === 'year'){\n                    this.focusedDate = new Date(\n                        this.focusedDate.getFullYear() + mapPossibleValues(direction, 0, 10),\n                        this.focusedDate.getMonth(),\n                        this.focusedDate.getDate()\n                    );\n                } else {\n                    this.focusedDate = new Date(\n                        this.focusedDate.getFullYear() + mapPossibleValues(direction, 0, 1),\n                        this.focusedDate.getMonth() + mapPossibleValues(direction, 1, 0),\n                        this.focusedDate.getDate()\n                    );\n                }\n\n                const position = direction.match(/left|down/) ? 'prev' : 'next';\n                const double = direction.match(/up|down/) ? '-double' : '';\n\n                // pulse button\n                const button = this.$refs.drop.$el.querySelector(`.ivu-date-picker-${position}-btn-arrow${double}`);\n                if (button) pulseElement(button);\n                return;\n            }\n\n            const initialDate = this.focusedDate || (this.internalValue && this.internalValue[0]) || new Date();\n            const focusedDate = new Date(initialDate);\n\n            if (this.type.match(/^date/)){\n                const lastOfMonth = getDayCountOfMonth(initialDate.getFullYear(), initialDate.getMonth());\n                const startDay = initialDate.getDate();\n                const nextDay = focusedDate.getDate() +  mapPossibleValues(direction, 1, 7);\n\n                if (nextDay < 1) {\n                    if (direction.match(/left|right/)) {\n                        focusedDate.setMonth(focusedDate.getMonth() + 1);\n                        focusedDate.setDate(nextDay);\n                    } else {\n                        focusedDate.setDate(startDay + Math.floor((lastOfMonth - startDay) / 7) * 7);\n                    }\n                } else if (nextDay > lastOfMonth){\n                    if (direction.match(/left|right/)) {\n                        focusedDate.setMonth(focusedDate.getMonth() - 1);\n                        focusedDate.setDate(nextDay);\n                    } else {\n                        focusedDate.setDate(startDay % 7);\n                    }\n                } else {\n                    focusedDate.setDate(nextDay);\n                }\n            }\n\n            if (this.type.match(/^month/)) {\n                focusedDate.setMonth(focusedDate.getMonth() + mapPossibleValues(direction, 1, 3));\n            }\n\n            if (this.type.match(/^year/)) {\n                focusedDate.setFullYear(focusedDate.getFullYear() + mapPossibleValues(direction, 1, 3));\n            }\n\n            this.focusedDate = focusedDate;\n        },\n        handleInputChange (event) {\n            const isArrayValue = this.type.includes('range') || this.multiple;\n            const oldValue = this.visualValue;\n            const newValue = event.target.value;\n            const newDate = this.parseDate(newValue);\n            const disabledDateFn =\n                this.options &&\n                typeof this.options.disabledDate === 'function' &&\n                this.options.disabledDate;\n            const valueToTest = isArrayValue ? newDate : newDate[0];\n            const isDisabled = disabledDateFn && disabledDateFn(valueToTest);\n            const isValidDate = newDate.reduce((valid, date) => valid && date instanceof Date, true);\n\n            if (newValue !== oldValue && !isDisabled && isValidDate) {\n                this.emitChange(this.type);\n                this.internalValue = newDate;\n            } else {\n                this.forceInputRerender++;\n            }\n        },\n        handleInputMouseenter () {\n            if (this.readonly || this.disabled) return;\n            if (this.visualValue && this.clearable) {\n                this.showClose = true;\n            }\n        },\n        handleInputMouseleave () {\n            this.showClose = false;\n        },\n        handleIconClick (e) {\n            if (this.showClose) {\n                if (e) e.stopPropagation();\n                this.handleClear();\n            } else if (!this.disabled) {\n                this.handleFocus();\n            }\n        },\n        handleClear () {\n            this.visible = false;\n            this.internalValue = this.internalValue.map(() => null);\n            this.$emit('on-clear');\n            this.dispatch('FormItem', 'on-form-change', '');\n            this.emitChange(this.type);\n            this.reset();\n\n            setTimeout(\n                () => this.onSelectionModeChange(this.type),\n                500 // delay to improve dropdown close visual effect\n            );\n        },\n        emitChange (type) {\n            this.$nextTick(() => {\n                this.$emit('on-change', this.publicStringValue, type);\n                this.dispatch('FormItem', 'on-form-change', this.publicStringValue);\n            });\n        },\n        parseDate(val) {\n            const isRange = this.type.includes('range');\n            const type = this.type;\n            const parser = (\n                TYPE_VALUE_RESOLVER_MAP[type] ||\n                TYPE_VALUE_RESOLVER_MAP['default']\n            ).parser;\n            const format = this.format || DEFAULT_FORMATS[type];\n            const multipleParser = TYPE_VALUE_RESOLVER_MAP['multiple'].parser;\n\n            if (val && type === 'time' && !(val instanceof Date)) {\n                val = parser(val, format, this.separator);\n            } else if (this.multiple && val) {\n                val = multipleParser(val, format, this.separator);\n            } else if (isRange) {\n                if (!val){\n                    val = [null, null];\n                } else {\n                    if (typeof val === 'string') {\n                        val = parser(val, format, this.separator);\n                    } else if (type === 'timerange') {\n                        val = parser(val, format, this.separator).map(v => v || '');\n                    } else {\n                        const [start, end] = val;\n                        if (start instanceof Date && end instanceof Date){\n                            val = val.map(date => new Date(date));\n                        } else if (typeof start === 'string' && typeof end === 'string'){\n                            val = parser(val.join(this.separator), format, this.separator);\n                        } else if (!start || !end){\n                            val = [null, null];\n                        }\n                    }\n                }\n            } else if (typeof val === 'string' && type.indexOf('time') !== 0){\n                val = parser(val, format) || null;\n            }\n\n            return (isRange || this.multiple) ? (val || []) : [val];\n        },\n        formatDate(value){\n            const format = DEFAULT_FORMATS[this.type];\n\n            if (this.multiple) {\n                const formatter = TYPE_VALUE_RESOLVER_MAP.multiple.formatter;\n                return formatter(value, this.format || format, this.separator);\n            } else {\n                const {formatter} = (\n                    TYPE_VALUE_RESOLVER_MAP[this.type] ||\n                    TYPE_VALUE_RESOLVER_MAP['default']\n                );\n                return formatter(value, this.format || format, this.separator);\n            }\n        },\n        onPick(dates, visible = false, type) {\n            if (this.multiple){\n                const pickedTimeStamp = dates.getTime();\n                const indexOfPickedDate = this.internalValue.findIndex(date => date && date.getTime() === pickedTimeStamp);\n                const allDates = [...this.internalValue, dates].filter(Boolean);\n                const timeStamps = allDates.map(date => date.getTime()).filter((ts, i, arr) => arr.indexOf(ts) === i && i !== indexOfPickedDate); // filter away duplicates\n                this.internalValue = timeStamps.map(ts => new Date(ts));\n            } else {\n                dates = this.parseDate(dates);\n                this.internalValue = Array.isArray(dates) ? dates : [dates];\n            }\n\n            if (this.internalValue[0]) this.focusedDate = this.internalValue[0];\n            this.focusedTime = {\n                ...this.focusedTime,\n                time: this.internalValue.map(extractTime)\n            };\n\n            if (!this.isConfirm) this.onSelectionModeChange(this.type); // reset the selectionMode\n            if (!this.isConfirm) this.visible = visible;\n            this.emitChange(type);\n        },\n        onPickSuccess(){\n            this.visible = false;\n            this.$emit('on-ok');\n            this.focus();\n            this.reset();\n        },\n        focus() {\n            this.$refs.input && this.$refs.input.focus();\n        },\n        updatePopper () {\n            this.$refs.drop.update();\n        }\n    },\n    watch: {\n        visible (state) {\n            if (state === false){\n                this.$refs.drop.destroy();\n            }\n            this.$refs.drop.update();\n            this.$emit('on-open-change', state);\n        },\n        value(val) {\n            this.internalValue = this.parseDate(val);\n        },\n        open (val) {\n            this.visible = val === true;\n        },\n        type(type){\n            this.onSelectionModeChange(type);\n        },\n        publicVModelValue(now, before){\n            const newValue = JSON.stringify(now);\n            const oldValue = JSON.stringify(before);\n            const shouldEmitInput = newValue !== oldValue || typeof now !== typeof before;\n            if (shouldEmitInput) this.$emit('input', now); // to update v-model\n        },\n    },\n    mounted () {\n        const initialValue = this.value;\n        const parsedValue = this.publicVModelValue;\n        if (typeof initialValue !== typeof parsedValue || JSON.stringify(initialValue) !== JSON.stringify(parsedValue)){\n            this.$emit('input', this.publicVModelValue); // to update v-model\n        }\n        if (this.open !== null) this.visible = this.open;\n\n        // to handle focus from confirm buttons\n        this.$on('focus-input', () => this.focus());\n        this.$on('update-popper', () => this.updatePopper());\n    }\n};\n",{"version":3,"sources":["picker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"picker.vue","sourceRoot":"node_modules/iview/src/components/date-picker","sourcesContent":["<template>\n    <div\n        :class=\"wrapperClasses\"\n        v-click-outside:mousedown.capture=\"handleClose\"\n        v-click-outside:touchstart.capture=\"handleClose\"\n        v-click-outside.capture=\"handleClose\"\n    >\n        <div ref=\"reference\" :class=\"[prefixCls + '-rel']\">\n            <slot>\n                <i-input\n                    :key=\"forceInputRerender\"\n                    :element-id=\"elementId\"\n                    :class=\"[prefixCls + '-editor']\"\n                    :readonly=\"!editable || readonly\"\n                    :disabled=\"disabled\"\n                    :size=\"size\"\n                    :placeholder=\"placeholder\"\n                    :value=\"visualValue\"\n                    :name=\"name\"\n                    ref=\"input\"\n\n                    @on-input-change=\"handleInputChange\"\n                    @on-focus=\"handleFocus\"\n                    @on-blur=\"handleBlur\"\n                    @click.native=\"handleFocus\"\n                    @keydown.native=\"handleKeydown\"\n                    @mouseenter.native=\"handleInputMouseenter\"\n                    @mouseleave.native=\"handleInputMouseleave\"\n                >\n                    <Icon @click=\"handleIconClick\" :type=\"arrowType\" :custom=\"customArrowType\" :size=\"arrowSize\" slot=\"suffix\" />\n                </i-input>\n            </slot>\n        </div>\n        <transition name=\"transition-drop\">\n            <Drop\n                @click.native=\"handleTransferClick\"\n                v-show=\"opened\"\n                :class=\"{ [prefixCls + '-transfer']: transfer }\"\n                :placement=\"placement\"\n                ref=\"drop\"\n                :data-transfer=\"transfer\"\n                :transfer=\"transfer\"\n                v-transfer-dom>\n                <div>\n                    <component\n                        :is=\"panel\"\n                        ref=\"pickerPanel\"\n                        :visible=\"visible\"\n                        :showTime=\"type === 'datetime' || type === 'datetimerange'\"\n                        :confirm=\"isConfirm\"\n                        :selectionMode=\"selectionMode\"\n                        :steps=\"steps\"\n                        :format=\"format\"\n                        :value=\"internalValue\"\n                        :start-date=\"startDate\"\n                        :split-panels=\"splitPanels\"\n                        :show-week-numbers=\"showWeekNumbers\"\n                        :picker-type=\"type\"\n                        :multiple=\"multiple\"\n                        :focused-date=\"focusedDate\"\n\n                        :time-picker-options=\"timePickerOptions\"\n\n                        v-bind=\"ownPickerProps\"\n\n                        @on-pick=\"onPick\"\n                        @on-pick-clear=\"handleClear\"\n                        @on-pick-success=\"onPickSuccess\"\n                        @on-pick-click=\"disableClickOutSide = true\"\n                        @on-selection-mode-change=\"onSelectionModeChange\"\n                    ></component>\n                </div>\n            </Drop>\n        </transition>\n    </div>\n</template>\n<script>\n\n\n    import iInput from '../../components/input/input.vue';\n    import Drop from '../../components/select/dropdown.vue';\n    import Icon from '../../components/icon/icon.vue';\n    import {directive as clickOutside} from 'v-click-outside-x';\n    import TransferDom from '../../directives/transfer-dom';\n    import { oneOf } from '../../utils/assist';\n    import { DEFAULT_FORMATS, TYPE_VALUE_RESOLVER_MAP, getDayCountOfMonth } from './util';\n    import {findComponentsDownward} from '../../utils/assist';\n    import Emitter from '../../mixins/emitter';\n\n    const prefixCls = 'ivu-date-picker';\n    const pickerPrefixCls = 'ivu-picker';\n\n    const isEmptyArray = val => val.reduce((isEmpty, str) => isEmpty && !str || (typeof str === 'string' && str.trim() === ''), true);\n    const keyValueMapper = {\n        40: 'up',\n        39: 'right',\n        38: 'down',\n        37: 'left',\n    };\n\n    const mapPossibleValues = (key, horizontal, vertical) => {\n        if (key === 'left') return horizontal * -1;\n        if (key === 'right') return horizontal * 1;\n        if (key === 'up') return vertical * 1;\n        if (key === 'down') return vertical * -1;\n    };\n\n    const pulseElement = (el) => {\n        const pulseClass = 'ivu-date-picker-btn-pulse';\n        el.classList.add(pulseClass);\n        setTimeout(() => el.classList.remove(pulseClass), 200);\n    };\n\n    const extractTime = date => {\n        if (!date) return [0, 0, 0];\n        return [\n            date.getHours(), date.getMinutes(), date.getSeconds()\n        ];\n    };\n\n\n    export default {\n        mixins: [ Emitter ],\n        components: { iInput, Drop, Icon },\n        directives: { clickOutside, TransferDom },\n        props: {\n            format: {\n                type: String\n            },\n            readonly: {\n                type: Boolean,\n                default: false\n            },\n            disabled: {\n                type: Boolean,\n                default: false\n            },\n            editable: {\n                type: Boolean,\n                default: true\n            },\n            clearable: {\n                type: Boolean,\n                default: true\n            },\n            confirm: {\n                type: Boolean,\n                default: false\n            },\n            open: {\n                type: Boolean,\n                default: null\n            },\n            multiple: {\n                type: Boolean,\n                default: false\n            },\n            timePickerOptions: {\n                default: () => ({}),\n                type: Object,\n            },\n            splitPanels: {\n                type: Boolean,\n                default: false\n            },\n            showWeekNumbers: {\n                type: Boolean,\n                default: false\n            },\n            startDate: {\n                type: Date\n            },\n            size: {\n                validator (value) {\n                    return oneOf(value, ['small', 'large', 'default']);\n                },\n                default () {\n                    return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n                }\n            },\n            placeholder: {\n                type: String,\n                default: ''\n            },\n            placement: {\n                validator (value) {\n                    return oneOf(value, ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end']);\n                },\n                default: 'bottom-start'\n            },\n            transfer: {\n                type: Boolean,\n                default () {\n                    return !this.$IVIEW || this.$IVIEW.transfer === '' ? false : this.$IVIEW.transfer;\n                }\n            },\n            name: {\n                type: String\n            },\n            elementId: {\n                type: String\n            },\n            steps: {\n                type: Array,\n                default: () => []\n            },\n            value: {\n                type: [Date, String, Array]\n            },\n            options: {\n                type: Object,\n                default: () => ({})\n            },\n            separator: {\n                type: String,\n                default: ' - '\n            }\n        },\n        data(){\n            const isRange = this.type.includes('range');\n            const emptyArray = isRange ? [null, null] : [null];\n            const initialValue = isEmptyArray((isRange ? this.value : [this.value]) || []) ? emptyArray : this.parseDate(this.value);\n            const focusedTime = initialValue.map(extractTime);\n\n            return {\n                prefixCls: prefixCls,\n                showClose: false,\n                visible: false,\n                internalValue: initialValue,\n                disableClickOutSide: false,    // fixed when click a date,trigger clickoutside to close picker\n                disableCloseUnderTransfer: false,  // transfer 模式下，点击Drop也会触发关闭,\n                selectionMode: this.onSelectionModeChange(this.type),\n                forceInputRerender: 1,\n                isFocused: false,\n                focusedDate: initialValue[0] || this.startDate || new Date(),\n                focusedTime: {\n                    column: 0, // which column inside the picker\n                    picker: 0, // which picker\n                    time: focusedTime, // the values array into [hh, mm, ss],\n                    active: false\n                },\n                internalFocus: false,\n            };\n        },\n        computed: {\n            wrapperClasses(){\n                return [prefixCls, {\n                    [prefixCls + '-focused']: this.isFocused\n                }];\n            },\n            publicVModelValue(){\n                if (this.multiple){\n                    return this.internalValue.slice();\n                } else {\n                    const isRange = this.type.includes('range');\n                    let val = this.internalValue.map(date => date instanceof Date ? new Date(date) : (date || ''));\n\n                    if (this.type.match(/^time/)) val = val.map(this.formatDate);\n                    return (isRange || this.multiple) ? val : val[0];\n                }\n            },\n            publicStringValue(){\n                const {formatDate, publicVModelValue, type} = this;\n                if (type.match(/^time/)) return publicVModelValue;\n                if (this.multiple) return formatDate(publicVModelValue);\n                return Array.isArray(publicVModelValue) ? publicVModelValue.map(formatDate) : formatDate(publicVModelValue);\n            },\n            opened () {\n                return this.open === null ? this.visible : this.open;\n            },\n            transition () {\n                const bottomPlaced = this.placement.match(/^bottom/);\n                return bottomPlaced ? 'slide-up' : 'slide-down';\n            },\n            visualValue() {\n                return this.formatDate(this.internalValue);\n            },\n            isConfirm(){\n                return this.confirm || this.type === 'datetime' || this.type === 'datetimerange' || this.multiple;\n            },\n            // 3.4.0, global setting customArrow 有值时，arrow 赋值空\n            arrowType () {\n                let type = '';\n\n                if (this.type === 'time' || this.type === 'timerange') {\n                    type = 'ios-time-outline';\n\n                    if (this.$IVIEW) {\n                        if (this.$IVIEW.timePicker.customIcon) {\n                            type = '';\n                        } else if (this.$IVIEW.timePicker.icon) {\n                            type = this.$IVIEW.timePicker.icon;\n                        }\n                    }\n                } else {\n                    type = 'ios-calendar-outline';\n\n                    if (this.$IVIEW) {\n                        if (this.$IVIEW.datePicker.customIcon) {\n                            type = '';\n                        } else if (this.$IVIEW.datePicker.icon) {\n                            type = this.$IVIEW.datePicker.icon;\n                        }\n                    }\n                }\n\n                if (this.showClose) type = 'ios-close-circle';\n\n                return type;\n            },\n            // 3.4.0, global setting\n            customArrowType () {\n                let type = '';\n\n                if (!this.showClose) {\n                    if (this.type === 'time' || this.type === 'timerange') {\n                        if (this.$IVIEW) {\n                            if (this.$IVIEW.timePicker.customIcon) {\n                                type = this.$IVIEW.timePicker.customIcon;\n                            }\n                        }\n                    } else {\n                        if (this.$IVIEW) {\n                            if (this.$IVIEW.datePicker.customIcon) {\n                                type = this.$IVIEW.datePicker.customIcon;\n                            }\n                        }\n                    }\n                }\n\n                return type;\n            },\n            // 3.4.0, global setting\n            arrowSize () {\n                let size = '';\n\n                if (!this.showClose) {\n                    if (this.type === 'time' || this.type === 'timerange') {\n                        if (this.$IVIEW) {\n                            if (this.$IVIEW.timePicker.iconSize) {\n                                size = this.$IVIEW.timePicker.iconSize;\n                            }\n                        }\n                    } else {\n                        if (this.$IVIEW) {\n                            if (this.$IVIEW.datePicker.iconSize) {\n                                size = this.$IVIEW.datePicker.iconSize;\n                            }\n                        }\n                    }\n                }\n\n                return size;\n            }\n        },\n        methods: {\n            onSelectionModeChange(type){\n                if (type.match(/^date/)) type = 'date';\n                this.selectionMode = oneOf(type, ['year', 'month', 'date', 'time']) && type;\n                return this.selectionMode;\n            },\n            // 开启 transfer 时，点击 Drop 即会关闭，这里不让其关闭\n            handleTransferClick () {\n                if (this.transfer) this.disableCloseUnderTransfer = true;\n            },\n            handleClose (e) {\n                if (this.disableCloseUnderTransfer) {\n                    this.disableCloseUnderTransfer = false;\n                    return false;\n                }\n\n                if (e && e.type === 'mousedown' && this.visible) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    return;\n                }\n\n                if (this.visible) {\n                    const pickerPanel = this.$refs.pickerPanel && this.$refs.pickerPanel.$el;\n                    if (e && pickerPanel && pickerPanel.contains(e.target)) return; // its a click inside own component, lets ignore it.\n\n                    this.visible = false;\n                    e && e.preventDefault();\n                    e && e.stopPropagation();\n                    this.$emit('on-clickoutside', e);\n                    return;\n                }\n\n                this.isFocused = false;\n                this.disableClickOutSide = false;\n            },\n            handleFocus (e) {\n                if (this.readonly) return;\n                this.isFocused = true;\n                if (e && e.type === 'focus') return; // just focus, don't open yet\n                if(!this.disabled){\n                    this.visible = true;\n                }\n            },\n            handleBlur (e) {\n                if (this.internalFocus){\n                    this.internalFocus = false;\n                    return;\n                }\n                if (this.visible) {\n                    e.preventDefault();\n                    return;\n                }\n\n                this.isFocused = false;\n                this.onSelectionModeChange(this.type);\n                this.internalValue = this.internalValue.slice(); // trigger panel watchers to reset views\n                this.reset();\n                this.$refs.pickerPanel.onToggleVisibility(false);\n\n            },\n            handleKeydown(e){\n                const keyCode = e.keyCode;\n\n                // handle \"tab\" key\n                if (keyCode === 9){\n                    if (this.visible){\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (this.isConfirm){\n                            const selector = `.${pickerPrefixCls}-confirm > *`;\n                            const tabbable = this.$refs.drop.$el.querySelectorAll(selector);\n                            this.internalFocus = true;\n                            const element = [...tabbable][e.shiftKey ? 'pop' : 'shift']();\n                            element.focus();\n                        } else {\n                            this.handleClose();\n                        }\n                    } else {\n                        this.focused = false;\n                    }\n                }\n\n                // open the panel\n                const arrows = [37, 38, 39, 40];\n                if (!this.visible && arrows.includes(keyCode)){\n                    this.visible = true;\n                    return;\n                }\n\n                // close on \"esc\" key\n                if (keyCode === 27){\n                    if (this.visible) {\n                        e.stopPropagation();\n                        this.handleClose();\n                    }\n                }\n\n                // select date, \"Enter\" key\n                if (keyCode === 13){\n                    const timePickers = findComponentsDownward(this, 'TimeSpinner');\n                    if (timePickers.length > 0){\n                        const columnsPerPicker = timePickers[0].showSeconds ? 3 : 2;\n                        const pickerIndex = Math.floor(this.focusedTime.column / columnsPerPicker);\n                        const value = this.focusedTime.time[pickerIndex];\n\n                        timePickers[pickerIndex].chooseValue(value);\n                        return;\n                    }\n\n                    if (this.type.match(/range/)){\n                        this.$refs.pickerPanel.handleRangePick(this.focusedDate, 'date');\n                    } else {\n                        const panels = findComponentsDownward(this, 'PanelTable');\n                        const compareDate = (d) => {\n                            const sliceIndex = ['year', 'month', 'date'].indexOf((this.type)) + 1;\n                            return [d.getFullYear(), d.getMonth(), d.getDate()].slice(0, sliceIndex).join('-');\n                        };\n                        const dateIsValid = panels.find(({cells}) => {\n                            return cells.find(({date, disabled}) => compareDate(date) === compareDate(this.focusedDate) && !disabled);\n                        });\n                        if (dateIsValid) this.onPick(this.focusedDate, false, 'date');\n                    }\n                }\n\n                if (!arrows.includes(keyCode)) return; // ignore rest of keys\n\n                // navigate times and dates\n                if (this.focusedTime.active) e.preventDefault(); // to prevent cursor from moving\n                this.navigateDatePanel(keyValueMapper[keyCode], e.shiftKey);\n            },\n            reset(){\n                this.$refs.pickerPanel.reset && this.$refs.pickerPanel.reset();\n            },\n            navigateTimePanel(direction){\n\n                this.focusedTime.active = true;\n                const horizontal = direction.match(/left|right/);\n                const vertical = direction.match(/up|down/);\n                const timePickers = findComponentsDownward(this, 'TimeSpinner');\n\n                const maxNrOfColumns = (timePickers[0].showSeconds ? 3 : 2) * timePickers.length;\n                const column = (currentColumn => {\n                    const incremented = currentColumn + (horizontal ? (direction === 'left' ? -1 : 1) : 0);\n                    return (incremented + maxNrOfColumns) % maxNrOfColumns;\n                })(this.focusedTime.column);\n\n                const columnsPerPicker = maxNrOfColumns / timePickers.length;\n                const pickerIndex = Math.floor(column / columnsPerPicker);\n                const col = column % columnsPerPicker;\n\n\n                if (horizontal){\n                    const time = this.internalValue.map(extractTime);\n\n                    this.focusedTime = {\n                        ...this.focusedTime,\n                        column: column,\n                        time: time\n                    };\n                    timePickers.forEach((instance, i) => {\n                        if (i === pickerIndex) instance.updateFocusedTime(col, time[pickerIndex]);\n                        else instance.updateFocusedTime(-1, instance.focusedTime);\n                    });\n                }\n\n                if (vertical){\n                    const increment = direction === 'up' ? 1 : -1;\n                    const timeParts = ['hours', 'minutes', 'seconds'];\n\n\n                    const pickerPossibleValues = timePickers[pickerIndex][`${timeParts[col]}List`];\n                    const nextIndex = pickerPossibleValues.findIndex(({text}) => this.focusedTime.time[pickerIndex][col] === text) + increment;\n                    const nextValue = pickerPossibleValues[nextIndex % pickerPossibleValues.length].text;\n                    const times = this.focusedTime.time.map((time, i) => {\n                        if (i !== pickerIndex) return time;\n                        time[col] = nextValue;\n                        return time;\n                    });\n                    this.focusedTime = {\n                        ...this.focusedTime,\n                        time: times\n                    };\n\n                    timePickers.forEach((instance, i) => {\n                        if (i === pickerIndex) instance.updateFocusedTime(col, times[i]);\n                        else instance.updateFocusedTime(-1, instance.focusedTime);\n                    });\n                }\n            },\n            navigateDatePanel(direction, shift){\n\n                const timePickers = findComponentsDownward(this, 'TimeSpinner');\n                if (timePickers.length > 0) {\n                    // we are in TimePicker mode\n                    this.navigateTimePanel(direction, shift, timePickers);\n                    return;\n                }\n\n                if (shift){\n                    if (this.type === 'year'){\n                        this.focusedDate = new Date(\n                            this.focusedDate.getFullYear() + mapPossibleValues(direction, 0, 10),\n                            this.focusedDate.getMonth(),\n                            this.focusedDate.getDate()\n                        );\n                    } else {\n                        this.focusedDate = new Date(\n                            this.focusedDate.getFullYear() + mapPossibleValues(direction, 0, 1),\n                            this.focusedDate.getMonth() + mapPossibleValues(direction, 1, 0),\n                            this.focusedDate.getDate()\n                        );\n                    }\n\n                    const position = direction.match(/left|down/) ? 'prev' : 'next';\n                    const double = direction.match(/up|down/) ? '-double' : '';\n\n                    // pulse button\n                    const button = this.$refs.drop.$el.querySelector(`.ivu-date-picker-${position}-btn-arrow${double}`);\n                    if (button) pulseElement(button);\n                    return;\n                }\n\n                const initialDate = this.focusedDate || (this.internalValue && this.internalValue[0]) || new Date();\n                const focusedDate = new Date(initialDate);\n\n                if (this.type.match(/^date/)){\n                    const lastOfMonth = getDayCountOfMonth(initialDate.getFullYear(), initialDate.getMonth());\n                    const startDay = initialDate.getDate();\n                    const nextDay = focusedDate.getDate() +  mapPossibleValues(direction, 1, 7);\n\n                    if (nextDay < 1) {\n                        if (direction.match(/left|right/)) {\n                            focusedDate.setMonth(focusedDate.getMonth() + 1);\n                            focusedDate.setDate(nextDay);\n                        } else {\n                            focusedDate.setDate(startDay + Math.floor((lastOfMonth - startDay) / 7) * 7);\n                        }\n                    } else if (nextDay > lastOfMonth){\n                        if (direction.match(/left|right/)) {\n                            focusedDate.setMonth(focusedDate.getMonth() - 1);\n                            focusedDate.setDate(nextDay);\n                        } else {\n                            focusedDate.setDate(startDay % 7);\n                        }\n                    } else {\n                        focusedDate.setDate(nextDay);\n                    }\n                }\n\n                if (this.type.match(/^month/)) {\n                    focusedDate.setMonth(focusedDate.getMonth() + mapPossibleValues(direction, 1, 3));\n                }\n\n                if (this.type.match(/^year/)) {\n                    focusedDate.setFullYear(focusedDate.getFullYear() + mapPossibleValues(direction, 1, 3));\n                }\n\n                this.focusedDate = focusedDate;\n            },\n            handleInputChange (event) {\n                const isArrayValue = this.type.includes('range') || this.multiple;\n                const oldValue = this.visualValue;\n                const newValue = event.target.value;\n                const newDate = this.parseDate(newValue);\n                const disabledDateFn =\n                    this.options &&\n                    typeof this.options.disabledDate === 'function' &&\n                    this.options.disabledDate;\n                const valueToTest = isArrayValue ? newDate : newDate[0];\n                const isDisabled = disabledDateFn && disabledDateFn(valueToTest);\n                const isValidDate = newDate.reduce((valid, date) => valid && date instanceof Date, true);\n\n                if (newValue !== oldValue && !isDisabled && isValidDate) {\n                    this.emitChange(this.type);\n                    this.internalValue = newDate;\n                } else {\n                    this.forceInputRerender++;\n                }\n            },\n            handleInputMouseenter () {\n                if (this.readonly || this.disabled) return;\n                if (this.visualValue && this.clearable) {\n                    this.showClose = true;\n                }\n            },\n            handleInputMouseleave () {\n                this.showClose = false;\n            },\n            handleIconClick (e) {\n                if (this.showClose) {\n                    if (e) e.stopPropagation();\n                    this.handleClear();\n                } else if (!this.disabled) {\n                    this.handleFocus();\n                }\n            },\n            handleClear () {\n                this.visible = false;\n                this.internalValue = this.internalValue.map(() => null);\n                this.$emit('on-clear');\n                this.dispatch('FormItem', 'on-form-change', '');\n                this.emitChange(this.type);\n                this.reset();\n\n                setTimeout(\n                    () => this.onSelectionModeChange(this.type),\n                    500 // delay to improve dropdown close visual effect\n                );\n            },\n            emitChange (type) {\n                this.$nextTick(() => {\n                    this.$emit('on-change', this.publicStringValue, type);\n                    this.dispatch('FormItem', 'on-form-change', this.publicStringValue);\n                });\n            },\n            parseDate(val) {\n                const isRange = this.type.includes('range');\n                const type = this.type;\n                const parser = (\n                    TYPE_VALUE_RESOLVER_MAP[type] ||\n                    TYPE_VALUE_RESOLVER_MAP['default']\n                ).parser;\n                const format = this.format || DEFAULT_FORMATS[type];\n                const multipleParser = TYPE_VALUE_RESOLVER_MAP['multiple'].parser;\n\n                if (val && type === 'time' && !(val instanceof Date)) {\n                    val = parser(val, format, this.separator);\n                } else if (this.multiple && val) {\n                    val = multipleParser(val, format, this.separator);\n                } else if (isRange) {\n                    if (!val){\n                        val = [null, null];\n                    } else {\n                        if (typeof val === 'string') {\n                            val = parser(val, format, this.separator);\n                        } else if (type === 'timerange') {\n                            val = parser(val, format, this.separator).map(v => v || '');\n                        } else {\n                            const [start, end] = val;\n                            if (start instanceof Date && end instanceof Date){\n                                val = val.map(date => new Date(date));\n                            } else if (typeof start === 'string' && typeof end === 'string'){\n                                val = parser(val.join(this.separator), format, this.separator);\n                            } else if (!start || !end){\n                                val = [null, null];\n                            }\n                        }\n                    }\n                } else if (typeof val === 'string' && type.indexOf('time') !== 0){\n                    val = parser(val, format) || null;\n                }\n\n                return (isRange || this.multiple) ? (val || []) : [val];\n            },\n            formatDate(value){\n                const format = DEFAULT_FORMATS[this.type];\n\n                if (this.multiple) {\n                    const formatter = TYPE_VALUE_RESOLVER_MAP.multiple.formatter;\n                    return formatter(value, this.format || format, this.separator);\n                } else {\n                    const {formatter} = (\n                        TYPE_VALUE_RESOLVER_MAP[this.type] ||\n                        TYPE_VALUE_RESOLVER_MAP['default']\n                    );\n                    return formatter(value, this.format || format, this.separator);\n                }\n            },\n            onPick(dates, visible = false, type) {\n                if (this.multiple){\n                    const pickedTimeStamp = dates.getTime();\n                    const indexOfPickedDate = this.internalValue.findIndex(date => date && date.getTime() === pickedTimeStamp);\n                    const allDates = [...this.internalValue, dates].filter(Boolean);\n                    const timeStamps = allDates.map(date => date.getTime()).filter((ts, i, arr) => arr.indexOf(ts) === i && i !== indexOfPickedDate); // filter away duplicates\n                    this.internalValue = timeStamps.map(ts => new Date(ts));\n                } else {\n                    dates = this.parseDate(dates);\n                    this.internalValue = Array.isArray(dates) ? dates : [dates];\n                }\n\n                if (this.internalValue[0]) this.focusedDate = this.internalValue[0];\n                this.focusedTime = {\n                    ...this.focusedTime,\n                    time: this.internalValue.map(extractTime)\n                };\n\n                if (!this.isConfirm) this.onSelectionModeChange(this.type); // reset the selectionMode\n                if (!this.isConfirm) this.visible = visible;\n                this.emitChange(type);\n            },\n            onPickSuccess(){\n                this.visible = false;\n                this.$emit('on-ok');\n                this.focus();\n                this.reset();\n            },\n            focus() {\n                this.$refs.input && this.$refs.input.focus();\n            },\n            updatePopper () {\n                this.$refs.drop.update();\n            }\n        },\n        watch: {\n            visible (state) {\n                if (state === false){\n                    this.$refs.drop.destroy();\n                }\n                this.$refs.drop.update();\n                this.$emit('on-open-change', state);\n            },\n            value(val) {\n                this.internalValue = this.parseDate(val);\n            },\n            open (val) {\n                this.visible = val === true;\n            },\n            type(type){\n                this.onSelectionModeChange(type);\n            },\n            publicVModelValue(now, before){\n                const newValue = JSON.stringify(now);\n                const oldValue = JSON.stringify(before);\n                const shouldEmitInput = newValue !== oldValue || typeof now !== typeof before;\n                if (shouldEmitInput) this.$emit('input', now); // to update v-model\n            },\n        },\n        mounted () {\n            const initialValue = this.value;\n            const parsedValue = this.publicVModelValue;\n            if (typeof initialValue !== typeof parsedValue || JSON.stringify(initialValue) !== JSON.stringify(parsedValue)){\n                this.$emit('input', this.publicVModelValue); // to update v-model\n            }\n            if (this.open !== null) this.visible = this.open;\n\n            // to handle focus from confirm buttons\n            this.$on('focus-input', () => this.focus());\n            this.$on('update-popper', () => this.updatePopper());\n        }\n    };\n</script>\n"]}]}