{"remainingRequest":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/iview/src/components/date-picker/panel/Date/date-range.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/iview/src/components/date-picker/panel/Date/date-range.vue","mtime":1546852004000},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js","mtime":1561201328360},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/babel-loader/lib/index.js","mtime":1561201328233},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js","mtime":1561201328360},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/vue-loader/lib/index.js","mtime":1561201333247}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Icon from '../../../icon/icon.vue';\nimport DateTable from '../../base/date-table.vue';\nimport YearTable from '../../base/year-table.vue';\nimport MonthTable from '../../base/month-table.vue';\nimport TimePicker from '../Time/time-range.vue';\nimport Confirm from '../../base/confirm.vue';\n\nimport { toDate, initTimeDate, formatDateLabels } from '../../util';\nimport datePanelLabel from './date-panel-label.vue';\n\nimport Mixin from '../panel-mixin';\nimport DateMixin from './date-panel-mixin';\nimport Locale from '../../../../mixins/locale';\n\nconst prefixCls = 'ivu-picker-panel';\nconst datePrefixCls = 'ivu-date-picker';\n\nconst dateSorter = (a, b) => {\n    if (!a || !b) return 0;\n    return a.getTime() - b.getTime();\n};\n\nexport default {\n    name: 'RangeDatePickerPanel',\n    mixins: [ Mixin, Locale, DateMixin ],\n    components: { Icon, DateTable, YearTable, MonthTable, TimePicker, Confirm, datePanelLabel },\n    props: {\n        // more props in the mixin\n        splitPanels: {\n            type: Boolean,\n            default: false\n        },\n    },\n    data(){\n        const [minDate, maxDate] = this.value.map(date => date || initTimeDate());\n        const leftPanelDate = this.startDate ? this.startDate : minDate;\n\n        return {\n            prefixCls: prefixCls,\n            datePrefixCls: datePrefixCls,\n            dates: this.value,\n            rangeState: {from: this.value[0], to: this.value[1], selecting: minDate && !maxDate},\n            currentView: this.selectionMode || 'range',\n            leftPickerTable: `${this.selectionMode}-table`,\n            rightPickerTable: `${this.selectionMode}-table`,\n            leftPanelDate: leftPanelDate,\n            rightPanelDate: new Date(leftPanelDate.getFullYear(), leftPanelDate.getMonth() + 1, 1)\n        };\n    },\n    computed: {\n        classes(){\n            return [\n                `${prefixCls}-body-wrapper`,\n                `${datePrefixCls}-with-range`,\n                {\n                    [`${prefixCls}-with-sidebar`]: this.shortcuts.length,\n                    [`${datePrefixCls}-with-week-numbers`]: this.showWeekNumbers\n                }\n            ];\n        },\n        panelBodyClasses(){\n            return [\n                prefixCls + '-body',\n                {\n                    [prefixCls + '-body-time']: this.showTime,\n                    [prefixCls + '-body-date']: !this.showTime,\n                }\n            ];\n        },\n        leftDatePanelLabel(){\n            return this.panelLabelConfig('left');\n        },\n        rightDatePanelLabel(){\n            return this.panelLabelConfig('right');\n        },\n        leftDatePanelView(){\n            return this.leftPickerTable.split('-').shift();\n        },\n        rightDatePanelView(){\n            return this.rightPickerTable.split('-').shift();\n        },\n        timeDisabled(){\n            return !(this.dates[0] && this.dates[1]);\n        },\n        preSelecting(){\n            const tableType = `${this.currentView}-table`;\n\n            return {\n                left: this.leftPickerTable !== tableType,\n                right: this.rightPickerTable !== tableType,\n            };\n        },\n        panelPickerHandlers(){\n            return {\n                left: this.preSelecting.left ? this.handlePreSelection.bind(this, 'left') : this.handleRangePick,\n                right: this.preSelecting.right ? this.handlePreSelection.bind(this, 'right') : this.handleRangePick,\n            };\n        }\n    },\n    watch: {\n        value(newVal) {\n            const minDate = newVal[0] ? toDate(newVal[0]) : null;\n            const maxDate = newVal[1] ? toDate(newVal[1]) : null;\n            this.dates = [minDate, maxDate].sort(dateSorter);\n\n            this.rangeState = {\n                from: this.dates[0],\n                to: this.dates[1],\n                selecting: false\n            };\n\n\n            // set panels positioning\n            this.setPanelDates(this.startDate || this.dates[0] || new Date());\n        },\n        currentView(currentView){\n            const leftMonth = this.leftPanelDate.getMonth();\n            const rightMonth = this.rightPanelDate.getMonth();\n            const isSameYear = this.leftPanelDate.getFullYear() === this.rightPanelDate.getFullYear();\n\n            if (currentView === 'date' && isSameYear && leftMonth === rightMonth){\n                this.changePanelDate('right', 'Month', 1);\n            }\n            if (currentView === 'month' && isSameYear){\n                this.changePanelDate('right', 'FullYear', 1);\n            }\n            if (currentView === 'year' && isSameYear){\n                this.changePanelDate('right', 'FullYear', 10);\n            }\n        },\n        selectionMode(type){\n            this.currentView = type || 'range';\n        },\n        focusedDate(date){\n            this.setPanelDates(date || new Date());\n        }\n    },\n    methods: {\n        reset(){\n            this.currentView = this.selectionMode;\n            this.leftPickerTable = `${this.currentView}-table`;\n            this.rightPickerTable = `${this.currentView}-table`;\n        },\n        setPanelDates(leftPanelDate){\n            this.leftPanelDate = leftPanelDate;\n            const rightPanelDate = new Date(leftPanelDate.getFullYear(), leftPanelDate.getMonth() + 1, 1);\n            const splitRightPanelDate = this.dates[1]? this.dates[1].getTime() : this.dates[1];\n            this.rightPanelDate = this.splitPanels ? new Date(Math.max(splitRightPanelDate, rightPanelDate.getTime())) : rightPanelDate;\n        },\n        panelLabelConfig (direction) {\n            const locale = this.t('i.locale');\n            const datePanelLabel = this.t('i.datepicker.datePanelLabel');\n            const handler = type => {\n                const fn = type == 'month' ? this.showMonthPicker : this.showYearPicker;\n                return () => fn(direction);\n            };\n\n            const date = this[`${direction}PanelDate`];\n            const { labels, separator } = formatDateLabels(locale, datePanelLabel, date);\n\n            return {\n                separator: separator,\n                labels: labels.map(obj => ((obj.handler = handler(obj.type)), obj))\n            };\n        },\n        prevYear (panel) {\n            const increment = this.currentView === 'year' ? -10 : -1;\n            this.changePanelDate(panel, 'FullYear', increment);\n        },\n        nextYear (panel) {\n            const increment = this.currentView === 'year' ? 10 : 1;\n            this.changePanelDate(panel, 'FullYear', increment);\n        },\n        prevMonth(panel){\n            this.changePanelDate(panel, 'Month', -1);\n        },\n        nextMonth(panel){\n            this.changePanelDate(panel, 'Month', 1);\n        },\n        changePanelDate(panel, type, increment, updateOtherPanel = true){\n            const current = new Date(this[`${panel}PanelDate`]);\n            current[`set${type}`](current[`get${type}`]() + increment);\n            this[`${panel}PanelDate`] = current;\n\n            if (!updateOtherPanel) return;\n\n            if (this.splitPanels){\n                // change other panel if dates overlap\n                const otherPanel = panel === 'left' ? 'right' : 'left';\n                if (panel === 'left' && this.leftPanelDate >= this.rightPanelDate){\n                    this.changePanelDate(otherPanel, type, 1);\n                }\n                if (panel === 'right' && this.rightPanelDate <= this.leftPanelDate){\n                    this.changePanelDate(otherPanel, type, -1);\n                }\n            } else {\n                // keep the panels together\n                const otherPanel = panel === 'left' ? 'right' : 'left';\n                const currentDate = this[`${otherPanel}PanelDate`];\n                const temp = new Date(currentDate);\n\n                if (type === 'Month') {\n                    const nextMonthLastDate = new Date(\n                        temp.getFullYear(), temp.getMonth() + increment + 1, 0\n                    ).getDate();\n                    temp.setDate(Math.min(nextMonthLastDate, temp.getDate()));\n                }\n\n                temp[`set${type}`](temp[`get${type}`]() + increment);\n                this[`${otherPanel}PanelDate`] = temp;\n            }\n        },\n        showYearPicker (panel) {\n            this[`${panel}PickerTable`] = 'year-table';\n        },\n        showMonthPicker (panel) {\n            this[`${panel}PickerTable`] = 'month-table';\n        },\n        handlePreSelection(panel, value){\n            this[`${panel}PanelDate`] = value;\n            const currentViewType = this[`${panel}PickerTable`];\n            if (currentViewType === 'year-table') this[`${panel}PickerTable`] = 'month-table';\n            else this[`${panel}PickerTable`] = `${this.currentView}-table`;\n\n            if (!this.splitPanels){\n                const otherPanel = panel === 'left' ? 'right' : 'left';\n                this[`${otherPanel}PanelDate`] = value;\n\n                const increment = otherPanel === 'left' ? -1 : 1; // #3973\n\n                this.changePanelDate(otherPanel, 'Month', increment, false);\n            }\n        },\n        handleRangePick (val, type) {\n            if (this.rangeState.selecting || this.currentView === 'time'){\n                if (this.currentView === 'time'){\n                    this.dates = val;\n                } else {\n                    const [minDate, maxDate] = [this.rangeState.from, val].sort(dateSorter);\n                    this.dates = [minDate, maxDate];\n                    this.rangeState = {\n                        from: minDate,\n                        to: maxDate,\n                        selecting: false\n                    };\n                }\n                this.handleConfirm(false, type || 'date');\n            } else {\n                this.rangeState = {\n                    from: val,\n                    to: null,\n                    selecting: true\n                };\n            }\n        },\n        handleChangeRange (val) {\n            this.rangeState.to = val;\n        },\n    },\n};\n",{"version":3,"sources":["date-range.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"date-range.vue","sourceRoot":"node_modules/iview/src/components/date-picker/panel/Date","sourcesContent":["<template>\n    <div :class=\"classes\" @mousedown.prevent>\n        <div :class=\"[prefixCls + '-sidebar']\" v-if=\"shortcuts.length\">\n            <div\n                :class=\"[prefixCls + '-shortcut']\"\n                v-for=\"shortcut in shortcuts\"\n                @click=\"handleShortcutClick(shortcut)\">{{ shortcut.text }}</div>\n        </div>\n        <div :class=\"panelBodyClasses\">\n            <div :class=\"[prefixCls + '-content', prefixCls + '-content-left']\" v-show=\"!isTime\">\n                <div :class=\"[datePrefixCls + '-header']\" v-show=\"currentView !== 'time'\">\n                    <span\n                        :class=\"iconBtnCls('prev', '-double')\"\n                        @click=\"prevYear('left')\"><Icon type=\"ios-arrow-back\"></Icon></span>\n                    <span\n                        v-if=\"leftPickerTable === 'date-table'\"\n                        :class=\"iconBtnCls('prev')\"\n                        @click=\"prevMonth('left')\"\n                        v-show=\"currentView === 'date'\"><Icon type=\"ios-arrow-back\"></Icon></span>\n                    <date-panel-label\n                        :date-panel-label=\"leftDatePanelLabel\"\n                        :current-view=\"leftDatePanelView\"\n                        :date-prefix-cls=\"datePrefixCls\"></date-panel-label>\n                    <span\n                        v-if=\"splitPanels || leftPickerTable !== 'date-table'\"\n                        :class=\"iconBtnCls('next', '-double')\"\n                        @click=\"nextYear('left')\"><Icon type=\"ios-arrow-forward\"></Icon></span>\n                    <span\n                        v-if=\"splitPanels && leftPickerTable === 'date-table'\"\n                        :class=\"iconBtnCls('next')\"\n                        @click=\"nextMonth('left')\"\n                        v-show=\"currentView === 'date'\"><Icon type=\"ios-arrow-forward\"></Icon></span>\n                </div>\n                <component\n                    :is=\"leftPickerTable\"\n                    ref=\"leftYearTable\"\n                    v-if=\"currentView !== 'time'\"\n                    :table-date=\"leftPanelDate\"\n                    selection-mode=\"range\"\n                    :disabled-date=\"disabledDate\"\n                    :range-state=\"rangeState\"\n                    :show-week-numbers=\"showWeekNumbers\"\n                    :value=\"preSelecting.left ? [dates[0]] : dates\"\n                    :focused-date=\"focusedDate\"\n\n                    @on-change-range=\"handleChangeRange\"\n                    @on-pick=\"panelPickerHandlers.left\"\n                    @on-pick-click=\"handlePickClick\"\n                ></component>\n            </div>\n            <div :class=\"[prefixCls + '-content', prefixCls + '-content-right']\" v-show=\"!isTime\">\n                <div :class=\"[datePrefixCls + '-header']\" v-show=\"currentView !== 'time'\">\n                    <span\n                        v-if=\"splitPanels || rightPickerTable !== 'date-table'\"\n                        :class=\"iconBtnCls('prev', '-double')\"\n                        @click=\"prevYear('right')\"><Icon type=\"ios-arrow-back\"></Icon></span>\n                    <span\n                        v-if=\"splitPanels && rightPickerTable === 'date-table'\"\n                        :class=\"iconBtnCls('prev')\"\n                        @click=\"prevMonth('right')\"\n                        v-show=\"currentView === 'date'\"><Icon type=\"ios-arrow-back\"></Icon></span>\n                    <date-panel-label\n                        :date-panel-label=\"rightDatePanelLabel\"\n                        :current-view=\"rightDatePanelView\"\n                        :date-prefix-cls=\"datePrefixCls\"></date-panel-label>\n                    <span\n                        :class=\"iconBtnCls('next', '-double')\"\n                        @click=\"nextYear('right')\"><Icon type=\"ios-arrow-forward\"></Icon></span>\n                    <span\n                        v-if=\"rightPickerTable === 'date-table'\"\n                        :class=\"iconBtnCls('next')\"\n                        @click=\"nextMonth('right')\"\n                        v-show=\"currentView === 'date'\"><Icon type=\"ios-arrow-forward\"></Icon></span>\n                </div>\n                <component\n                    :is=\"rightPickerTable\"\n                    ref=\"rightYearTable\"\n                    v-if=\"currentView !== 'time'\"\n                    :table-date=\"rightPanelDate\"\n                    selection-mode=\"range\"\n                    :range-state=\"rangeState\"\n                    :disabled-date=\"disabledDate\"\n                    :show-week-numbers=\"showWeekNumbers\"\n                    :value=\"preSelecting.right ? [dates[dates.length - 1]] : dates\"\n                    :focused-date=\"focusedDate\"\n\n                    @on-change-range=\"handleChangeRange\"\n                    @on-pick=\"panelPickerHandlers.right\"\n                    @on-pick-click=\"handlePickClick\"></component>\n            </div>\n            <div :class=\"[prefixCls + '-content']\" v-show=\"isTime\">\n                <time-picker\n                    ref=\"timePicker\"\n                    v-if=\"currentView === 'time'\"\n                    :value=\"dates\"\n                    :format=\"format\"\n                    :time-disabled=\"timeDisabled\"\n                    v-bind=\"timePickerOptions\"\n                    @on-pick=\"handleRangePick\"\n                    @on-pick-click=\"handlePickClick\"\n                    @on-pick-clear=\"handlePickClear\"\n                    @on-pick-success=\"handlePickSuccess\"\n                    @on-pick-toggle-time=\"handleToggleTime\"\n                ></time-picker>\n            </div>\n            <Confirm\n                v-if=\"confirm\"\n                :show-time=\"showTime\"\n                :is-time=\"isTime\"\n                :time-disabled=\"timeDisabled\"\n                @on-pick-toggle-time=\"handleToggleTime\"\n                @on-pick-clear=\"handlePickClear\"\n                @on-pick-success=\"handlePickSuccess\"></Confirm>\n        </div>\n    </div>\n</template>\n<script>\n    import Icon from '../../../icon/icon.vue';\n    import DateTable from '../../base/date-table.vue';\n    import YearTable from '../../base/year-table.vue';\n    import MonthTable from '../../base/month-table.vue';\n    import TimePicker from '../Time/time-range.vue';\n    import Confirm from '../../base/confirm.vue';\n\n    import { toDate, initTimeDate, formatDateLabels } from '../../util';\n    import datePanelLabel from './date-panel-label.vue';\n\n    import Mixin from '../panel-mixin';\n    import DateMixin from './date-panel-mixin';\n    import Locale from '../../../../mixins/locale';\n\n    const prefixCls = 'ivu-picker-panel';\n    const datePrefixCls = 'ivu-date-picker';\n\n    const dateSorter = (a, b) => {\n        if (!a || !b) return 0;\n        return a.getTime() - b.getTime();\n    };\n\n    export default {\n        name: 'RangeDatePickerPanel',\n        mixins: [ Mixin, Locale, DateMixin ],\n        components: { Icon, DateTable, YearTable, MonthTable, TimePicker, Confirm, datePanelLabel },\n        props: {\n            // more props in the mixin\n            splitPanels: {\n                type: Boolean,\n                default: false\n            },\n        },\n        data(){\n            const [minDate, maxDate] = this.value.map(date => date || initTimeDate());\n            const leftPanelDate = this.startDate ? this.startDate : minDate;\n\n            return {\n                prefixCls: prefixCls,\n                datePrefixCls: datePrefixCls,\n                dates: this.value,\n                rangeState: {from: this.value[0], to: this.value[1], selecting: minDate && !maxDate},\n                currentView: this.selectionMode || 'range',\n                leftPickerTable: `${this.selectionMode}-table`,\n                rightPickerTable: `${this.selectionMode}-table`,\n                leftPanelDate: leftPanelDate,\n                rightPanelDate: new Date(leftPanelDate.getFullYear(), leftPanelDate.getMonth() + 1, 1)\n            };\n        },\n        computed: {\n            classes(){\n                return [\n                    `${prefixCls}-body-wrapper`,\n                    `${datePrefixCls}-with-range`,\n                    {\n                        [`${prefixCls}-with-sidebar`]: this.shortcuts.length,\n                        [`${datePrefixCls}-with-week-numbers`]: this.showWeekNumbers\n                    }\n                ];\n            },\n            panelBodyClasses(){\n                return [\n                    prefixCls + '-body',\n                    {\n                        [prefixCls + '-body-time']: this.showTime,\n                        [prefixCls + '-body-date']: !this.showTime,\n                    }\n                ];\n            },\n            leftDatePanelLabel(){\n                return this.panelLabelConfig('left');\n            },\n            rightDatePanelLabel(){\n                return this.panelLabelConfig('right');\n            },\n            leftDatePanelView(){\n                return this.leftPickerTable.split('-').shift();\n            },\n            rightDatePanelView(){\n                return this.rightPickerTable.split('-').shift();\n            },\n            timeDisabled(){\n                return !(this.dates[0] && this.dates[1]);\n            },\n            preSelecting(){\n                const tableType = `${this.currentView}-table`;\n\n                return {\n                    left: this.leftPickerTable !== tableType,\n                    right: this.rightPickerTable !== tableType,\n                };\n            },\n            panelPickerHandlers(){\n                return {\n                    left: this.preSelecting.left ? this.handlePreSelection.bind(this, 'left') : this.handleRangePick,\n                    right: this.preSelecting.right ? this.handlePreSelection.bind(this, 'right') : this.handleRangePick,\n                };\n            }\n        },\n        watch: {\n            value(newVal) {\n                const minDate = newVal[0] ? toDate(newVal[0]) : null;\n                const maxDate = newVal[1] ? toDate(newVal[1]) : null;\n                this.dates = [minDate, maxDate].sort(dateSorter);\n\n                this.rangeState = {\n                    from: this.dates[0],\n                    to: this.dates[1],\n                    selecting: false\n                };\n\n\n                // set panels positioning\n                this.setPanelDates(this.startDate || this.dates[0] || new Date());\n            },\n            currentView(currentView){\n                const leftMonth = this.leftPanelDate.getMonth();\n                const rightMonth = this.rightPanelDate.getMonth();\n                const isSameYear = this.leftPanelDate.getFullYear() === this.rightPanelDate.getFullYear();\n\n                if (currentView === 'date' && isSameYear && leftMonth === rightMonth){\n                    this.changePanelDate('right', 'Month', 1);\n                }\n                if (currentView === 'month' && isSameYear){\n                    this.changePanelDate('right', 'FullYear', 1);\n                }\n                if (currentView === 'year' && isSameYear){\n                    this.changePanelDate('right', 'FullYear', 10);\n                }\n            },\n            selectionMode(type){\n                this.currentView = type || 'range';\n            },\n            focusedDate(date){\n                this.setPanelDates(date || new Date());\n            }\n        },\n        methods: {\n            reset(){\n                this.currentView = this.selectionMode;\n                this.leftPickerTable = `${this.currentView}-table`;\n                this.rightPickerTable = `${this.currentView}-table`;\n            },\n            setPanelDates(leftPanelDate){\n                this.leftPanelDate = leftPanelDate;\n                const rightPanelDate = new Date(leftPanelDate.getFullYear(), leftPanelDate.getMonth() + 1, 1);\n                const splitRightPanelDate = this.dates[1]? this.dates[1].getTime() : this.dates[1];\n                this.rightPanelDate = this.splitPanels ? new Date(Math.max(splitRightPanelDate, rightPanelDate.getTime())) : rightPanelDate;\n            },\n            panelLabelConfig (direction) {\n                const locale = this.t('i.locale');\n                const datePanelLabel = this.t('i.datepicker.datePanelLabel');\n                const handler = type => {\n                    const fn = type == 'month' ? this.showMonthPicker : this.showYearPicker;\n                    return () => fn(direction);\n                };\n\n                const date = this[`${direction}PanelDate`];\n                const { labels, separator } = formatDateLabels(locale, datePanelLabel, date);\n\n                return {\n                    separator: separator,\n                    labels: labels.map(obj => ((obj.handler = handler(obj.type)), obj))\n                };\n            },\n            prevYear (panel) {\n                const increment = this.currentView === 'year' ? -10 : -1;\n                this.changePanelDate(panel, 'FullYear', increment);\n            },\n            nextYear (panel) {\n                const increment = this.currentView === 'year' ? 10 : 1;\n                this.changePanelDate(panel, 'FullYear', increment);\n            },\n            prevMonth(panel){\n                this.changePanelDate(panel, 'Month', -1);\n            },\n            nextMonth(panel){\n                this.changePanelDate(panel, 'Month', 1);\n            },\n            changePanelDate(panel, type, increment, updateOtherPanel = true){\n                const current = new Date(this[`${panel}PanelDate`]);\n                current[`set${type}`](current[`get${type}`]() + increment);\n                this[`${panel}PanelDate`] = current;\n\n                if (!updateOtherPanel) return;\n\n                if (this.splitPanels){\n                    // change other panel if dates overlap\n                    const otherPanel = panel === 'left' ? 'right' : 'left';\n                    if (panel === 'left' && this.leftPanelDate >= this.rightPanelDate){\n                        this.changePanelDate(otherPanel, type, 1);\n                    }\n                    if (panel === 'right' && this.rightPanelDate <= this.leftPanelDate){\n                        this.changePanelDate(otherPanel, type, -1);\n                    }\n                } else {\n                    // keep the panels together\n                    const otherPanel = panel === 'left' ? 'right' : 'left';\n                    const currentDate = this[`${otherPanel}PanelDate`];\n                    const temp = new Date(currentDate);\n\n                    if (type === 'Month') {\n                        const nextMonthLastDate = new Date(\n                            temp.getFullYear(), temp.getMonth() + increment + 1, 0\n                        ).getDate();\n                        temp.setDate(Math.min(nextMonthLastDate, temp.getDate()));\n                    }\n\n                    temp[`set${type}`](temp[`get${type}`]() + increment);\n                    this[`${otherPanel}PanelDate`] = temp;\n                }\n            },\n            showYearPicker (panel) {\n                this[`${panel}PickerTable`] = 'year-table';\n            },\n            showMonthPicker (panel) {\n                this[`${panel}PickerTable`] = 'month-table';\n            },\n            handlePreSelection(panel, value){\n                this[`${panel}PanelDate`] = value;\n                const currentViewType = this[`${panel}PickerTable`];\n                if (currentViewType === 'year-table') this[`${panel}PickerTable`] = 'month-table';\n                else this[`${panel}PickerTable`] = `${this.currentView}-table`;\n\n                if (!this.splitPanels){\n                    const otherPanel = panel === 'left' ? 'right' : 'left';\n                    this[`${otherPanel}PanelDate`] = value;\n\n                    const increment = otherPanel === 'left' ? -1 : 1; // #3973\n\n                    this.changePanelDate(otherPanel, 'Month', increment, false);\n                }\n            },\n            handleRangePick (val, type) {\n                if (this.rangeState.selecting || this.currentView === 'time'){\n                    if (this.currentView === 'time'){\n                        this.dates = val;\n                    } else {\n                        const [minDate, maxDate] = [this.rangeState.from, val].sort(dateSorter);\n                        this.dates = [minDate, maxDate];\n                        this.rangeState = {\n                            from: minDate,\n                            to: maxDate,\n                            selecting: false\n                        };\n                    }\n                    this.handleConfirm(false, type || 'date');\n                } else {\n                    this.rangeState = {\n                        from: val,\n                        to: null,\n                        selecting: true\n                    };\n                }\n            },\n            handleChangeRange (val) {\n                this.rangeState.to = val;\n            },\n        },\n    };\n</script>\n"]}]}