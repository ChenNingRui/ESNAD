{"remainingRequest":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/iview/src/components/date-picker/panel/Time/time.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/iview/src/components/date-picker/panel/Time/time.vue","mtime":1538018844000},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js","mtime":1561201328360},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/babel-loader/lib/index.js","mtime":1561201328233},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js","mtime":1561201328360},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/vue-loader/lib/index.js","mtime":1561201333247}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TimeSpinner from '../../base/time-spinner.vue';\nimport Confirm from '../../base/confirm.vue';\nimport Options from '../../time-mixins';\n\n\nimport Mixin from '../panel-mixin';\nimport Locale from '../../../../mixins/locale';\n\nimport { initTimeDate } from '../../util';\n\nconst prefixCls = 'ivu-picker-panel';\nconst timePrefixCls = 'ivu-time-picker';\n\nconst capitalize = (str) => str[0].toUpperCase() + str.slice(1);\nconst mergeDateHMS = (date, hours, minutes, seconds) => {\n    const newDate = new Date(date.getTime());\n    newDate.setHours(hours);\n    newDate.setMinutes(minutes);\n    newDate.setSeconds(seconds);\n    return newDate;\n};\nconst unique = (el, i, arr) => arr.indexOf(el) === i;\nconst returnFalse = () => false;\n\nexport default {\n    name: 'TimePickerPanel',\n    mixins: [ Mixin, Locale, Options ],\n    components: { TimeSpinner, Confirm },\n    props: {\n        disabledDate: {\n            type: Function,\n            default: returnFalse\n        },\n        steps: {\n            type: Array,\n            default: () => []\n        },\n        format: {\n            type: String,\n            default: 'HH:mm:ss'\n        },\n        value: {\n            type: Array,\n            required: true\n        },\n    },\n    data () {\n        return {\n            prefixCls: prefixCls,\n            timePrefixCls: timePrefixCls,\n            date: this.value[0] || initTimeDate(),\n            showDate: false\n        };\n    },\n    computed: {\n        showSeconds () {\n            return !(this.format || '').match(/mm$/);\n        },\n        visibleDate () { // TODO\n            const date = this.date;\n            const month = date.getMonth() + 1;\n            const tYear = this.t('i.datepicker.year');\n            const tMonth = this.t(`i.datepicker.month${month}`);\n            return `${date.getFullYear()}${tYear} ${tMonth}`;\n        },\n        timeSlots(){\n            if (!this.value[0]) return [];\n            return ['getHours', 'getMinutes', 'getSeconds'].map(slot => this.date[slot]());\n        },\n        disabledHMS(){\n            const disabledTypes = ['disabledHours', 'disabledMinutes', 'disabledSeconds'];\n            if (this.disabledDate === returnFalse || !this.value[0]) {\n                const disabled = disabledTypes.reduce(\n                    (obj, type) => (obj[type] = this[type], obj), {}\n                );\n                return disabled;\n            } else {\n                const slots = [24, 60, 60];\n                const disabled = ['Hours', 'Minutes', 'Seconds'].map(type => this[`disabled${type}`]);\n                const disabledHMS = disabled.map((preDisabled, j) => {\n                    const slot = slots[j];\n                    const toDisable = preDisabled;\n                    for (let i = 0; i < slot; i+= (this.steps[j] || 1)){\n                        const hms = this.timeSlots.map((slot, x) => x === j ? i : slot);\n                        const testDateTime = mergeDateHMS(this.date, ...hms);\n                        if (this.disabledDate(testDateTime, true)) toDisable.push(i);\n                    }\n                    return toDisable.filter(unique);\n                });\n                return disabledTypes.reduce(\n                    (obj, type, i) => (obj[type] = disabledHMS[i], obj), {}\n                );\n            }\n        }\n    },\n    watch: {\n        value (dates) {\n            let newVal = dates[0] || initTimeDate();\n            newVal = new Date(newVal);\n            this.date = newVal;\n        }\n    },\n    methods: {\n        handleChange (date, emit = true) {\n\n            const newDate = new Date(this.date);\n            Object.keys(date).forEach(\n                type => newDate[`set${capitalize(type)}`](date[type])\n            );\n\n            if (emit) this.$emit('on-pick', newDate, 'time');\n        },\n    },\n    mounted () {\n        if (this.$parent && this.$parent.$options.name === 'DatePicker') this.showDate = true;\n    }\n};\n",{"version":3,"sources":["time.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"time.vue","sourceRoot":"node_modules/iview/src/components/date-picker/panel/Time","sourcesContent":["<template>\n    <div :class=\"[prefixCls + '-body-wrapper']\" @mousedown.prevent>\n        <div :class=\"[prefixCls + '-body']\">\n            <div :class=\"[timePrefixCls + '-header']\" v-if=\"showDate\">{{ visibleDate }}</div>\n            <div :class=\"[prefixCls + '-content']\">\n                <time-spinner\n                    ref=\"timeSpinner\"\n                    :show-seconds=\"showSeconds\"\n                    :steps=\"steps\"\n                    :hours=\"timeSlots[0]\"\n                    :minutes=\"timeSlots[1]\"\n                    :seconds=\"timeSlots[2]\"\n                    :disabled-hours=\"disabledHMS.disabledHours\"\n                    :disabled-minutes=\"disabledHMS.disabledMinutes\"\n                    :disabled-seconds=\"disabledHMS.disabledSeconds\"\n                    :hide-disabled-options=\"hideDisabledOptions\"\n                    @on-change=\"handleChange\"\n                    @on-pick-click=\"handlePickClick\"></time-spinner>\n            </div>\n            <Confirm\n                v-if=\"confirm\"\n                @on-pick-clear=\"handlePickClear\"\n                @on-pick-success=\"handlePickSuccess\"></Confirm>\n        </div>\n    </div>\n</template>\n<script>\n    import TimeSpinner from '../../base/time-spinner.vue';\n    import Confirm from '../../base/confirm.vue';\n    import Options from '../../time-mixins';\n\n\n    import Mixin from '../panel-mixin';\n    import Locale from '../../../../mixins/locale';\n\n    import { initTimeDate } from '../../util';\n\n    const prefixCls = 'ivu-picker-panel';\n    const timePrefixCls = 'ivu-time-picker';\n\n    const capitalize = (str) => str[0].toUpperCase() + str.slice(1);\n    const mergeDateHMS = (date, hours, minutes, seconds) => {\n        const newDate = new Date(date.getTime());\n        newDate.setHours(hours);\n        newDate.setMinutes(minutes);\n        newDate.setSeconds(seconds);\n        return newDate;\n    };\n    const unique = (el, i, arr) => arr.indexOf(el) === i;\n    const returnFalse = () => false;\n\n    export default {\n        name: 'TimePickerPanel',\n        mixins: [ Mixin, Locale, Options ],\n        components: { TimeSpinner, Confirm },\n        props: {\n            disabledDate: {\n                type: Function,\n                default: returnFalse\n            },\n            steps: {\n                type: Array,\n                default: () => []\n            },\n            format: {\n                type: String,\n                default: 'HH:mm:ss'\n            },\n            value: {\n                type: Array,\n                required: true\n            },\n        },\n        data () {\n            return {\n                prefixCls: prefixCls,\n                timePrefixCls: timePrefixCls,\n                date: this.value[0] || initTimeDate(),\n                showDate: false\n            };\n        },\n        computed: {\n            showSeconds () {\n                return !(this.format || '').match(/mm$/);\n            },\n            visibleDate () { // TODO\n                const date = this.date;\n                const month = date.getMonth() + 1;\n                const tYear = this.t('i.datepicker.year');\n                const tMonth = this.t(`i.datepicker.month${month}`);\n                return `${date.getFullYear()}${tYear} ${tMonth}`;\n            },\n            timeSlots(){\n                if (!this.value[0]) return [];\n                return ['getHours', 'getMinutes', 'getSeconds'].map(slot => this.date[slot]());\n            },\n            disabledHMS(){\n                const disabledTypes = ['disabledHours', 'disabledMinutes', 'disabledSeconds'];\n                if (this.disabledDate === returnFalse || !this.value[0]) {\n                    const disabled = disabledTypes.reduce(\n                        (obj, type) => (obj[type] = this[type], obj), {}\n                    );\n                    return disabled;\n                } else {\n                    const slots = [24, 60, 60];\n                    const disabled = ['Hours', 'Minutes', 'Seconds'].map(type => this[`disabled${type}`]);\n                    const disabledHMS = disabled.map((preDisabled, j) => {\n                        const slot = slots[j];\n                        const toDisable = preDisabled;\n                        for (let i = 0; i < slot; i+= (this.steps[j] || 1)){\n                            const hms = this.timeSlots.map((slot, x) => x === j ? i : slot);\n                            const testDateTime = mergeDateHMS(this.date, ...hms);\n                            if (this.disabledDate(testDateTime, true)) toDisable.push(i);\n                        }\n                        return toDisable.filter(unique);\n                    });\n                    return disabledTypes.reduce(\n                        (obj, type, i) => (obj[type] = disabledHMS[i], obj), {}\n                    );\n                }\n            }\n        },\n        watch: {\n            value (dates) {\n                let newVal = dates[0] || initTimeDate();\n                newVal = new Date(newVal);\n                this.date = newVal;\n            }\n        },\n        methods: {\n            handleChange (date, emit = true) {\n\n                const newDate = new Date(this.date);\n                Object.keys(date).forEach(\n                    type => newDate[`set${capitalize(type)}`](date[type])\n                );\n\n                if (emit) this.$emit('on-pick', newDate, 'time');\n            },\n        },\n        mounted () {\n            if (this.$parent && this.$parent.$options.name === 'DatePicker') this.showDate = true;\n        }\n    };\n</script>\n"]}]}