{"remainingRequest":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/iview/src/components/date-picker/base/time-spinner.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/iview/src/components/date-picker/base/time-spinner.vue","mtime":1538018844000},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js","mtime":1561201328360},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/babel-loader/lib/index.js","mtime":1561201328233},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js","mtime":1561201328360},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/vue-loader/lib/index.js","mtime":1561201333247}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Options from '../time-mixins';\nimport { deepCopy, scrollTop, firstUpperCase } from '../../../utils/assist';\n\nconst prefixCls = 'ivu-time-picker-cells';\nconst timeParts = ['hours', 'minutes', 'seconds'];\n\nexport default {\n    name: 'TimeSpinner',\n    mixins: [Options],\n    props: {\n        hours: {\n            type: [Number, String],\n            default: NaN\n        },\n        minutes: {\n            type: [Number, String],\n            default: NaN\n        },\n        seconds: {\n            type: [Number, String],\n            default: NaN\n        },\n        showSeconds: {\n            type: Boolean,\n            default: true\n        },\n        steps: {\n            type: Array,\n            default: () => []\n        }\n    },\n    data () {\n        return {\n            spinerSteps: [1, 1, 1].map((one, i) => Math.abs(this.steps[i]) || one),\n            prefixCls: prefixCls,\n            compiled: false,\n            focusedColumn: -1, // which column inside the picker\n            focusedTime: [0, 0, 0] // the values array into [hh, mm, ss]\n        };\n    },\n    computed: {\n        classes () {\n            return [\n                `${prefixCls}`,\n                {\n                    [`${prefixCls}-with-seconds`]: this.showSeconds\n                }\n            ];\n        },\n        hoursList () {\n            let hours = [];\n            const step = this.spinerSteps[0];\n            const focusedHour = this.focusedColumn === 0 && this.focusedTime[0];\n            const hour_tmpl = {\n                text: 0,\n                selected: false,\n                disabled: false,\n                hide: false\n            };\n\n            for (let i = 0; i < 24; i += step) {\n                const hour = deepCopy(hour_tmpl);\n                hour.text = i;\n                hour.focused = i === focusedHour;\n\n                if (this.disabledHours.length && this.disabledHours.indexOf(i) > -1) {\n                    hour.disabled = true;\n                    if (this.hideDisabledOptions) hour.hide = true;\n                }\n                if (this.hours === i) hour.selected = true;\n                hours.push(hour);\n            }\n\n            return hours;\n        },\n        minutesList () {\n            let minutes = [];\n            const step = this.spinerSteps[1];\n            const focusedMinute = this.focusedColumn === 1 && this.focusedTime[1];\n            const minute_tmpl = {\n                text: 0,\n                selected: false,\n                disabled: false,\n                hide: false\n            };\n\n            for (let i = 0; i < 60; i += step) {\n                const minute = deepCopy(minute_tmpl);\n                minute.text = i;\n                minute.focused = i === focusedMinute;\n\n                if (this.disabledMinutes.length && this.disabledMinutes.indexOf(i) > -1) {\n                    minute.disabled = true;\n                    if (this.hideDisabledOptions) minute.hide = true;\n                }\n                if (this.minutes === i) minute.selected = true;\n                minutes.push(minute);\n            }\n            return minutes;\n        },\n        secondsList () {\n            let seconds = [];\n            const step = this.spinerSteps[2];\n            const focusedMinute = this.focusedColumn === 2 && this.focusedTime[2];\n            const second_tmpl = {\n                text: 0,\n                selected: false,\n                disabled: false,\n                hide: false\n            };\n\n            for (let i = 0; i < 60; i += step) {\n                const second = deepCopy(second_tmpl);\n                second.text = i;\n                second.focused = i === focusedMinute;\n\n                if (this.disabledSeconds.length && this.disabledSeconds.indexOf(i) > -1) {\n                    second.disabled = true;\n                    if (this.hideDisabledOptions) second.hide = true;\n                }\n                if (this.seconds === i) second.selected = true;\n                seconds.push(second);\n            }\n\n            return seconds;\n        }\n    },\n    methods: {\n        getCellCls (cell) {\n            return [\n                `${prefixCls}-cell`,\n                {\n                    [`${prefixCls}-cell-selected`]: cell.selected,\n                    [`${prefixCls}-cell-focused`]: cell.focused,\n                    [`${prefixCls}-cell-disabled`]: cell.disabled\n\n                }\n            ];\n        },\n        chooseValue(values){\n            const changes = timeParts.reduce((obj, part, i) => {\n                const value = values[i];\n                if (this[part] ===  value) return obj;\n                return {\n                    ...obj,\n                    [part]: value\n                };\n            }, {});\n            if (Object.keys(changes).length > 0) {\n                this.emitChange(changes);\n            }\n        },\n        handleClick (type, cell) {\n            if (cell.disabled) return;\n            const data = {[type]: cell.text};\n            this.emitChange(data);\n        },\n        emitChange(changes){\n            this.$emit('on-change', changes);\n            this.$emit('on-pick-click');\n        },\n        scroll (type, index) {\n            const from = this.$refs[type].scrollTop;\n            const to = 24 * this.getScrollIndex(type, index);\n            scrollTop(this.$refs[type], from, to, 500);\n        },\n        getScrollIndex (type, index) {\n            const Type = firstUpperCase(type);\n            const disabled = this[`disabled${Type}`];\n            if (disabled.length && this.hideDisabledOptions) {\n                let _count = 0;\n                disabled.forEach(item => item <= index ? _count++ : '');\n                index -= _count;\n            }\n            return index;\n        },\n        updateScroll () {\n            this.$nextTick(() => {\n                timeParts.forEach(type => {\n                    this.$refs[type].scrollTop = 24 * this[`${type}List`].findIndex(obj => obj.text == this[type]);\n                });\n            });\n        },\n        formatTime (text) {\n            return text < 10 ? '0' + text : text;\n        },\n        updateFocusedTime(col, time) {\n            this.focusedColumn = col;\n            this.focusedTime = time.slice();\n\n        }\n    },\n    watch: {\n        hours (val) {\n            if (!this.compiled) return;\n            this.scroll('hours', this.hoursList.findIndex(obj => obj.text == val));\n        },\n        minutes (val) {\n            if (!this.compiled) return;\n            this.scroll('minutes', this.minutesList.findIndex(obj => obj.text == val));\n        },\n        seconds (val) {\n            if (!this.compiled) return;\n            this.scroll('seconds', this.secondsList.findIndex(obj => obj.text == val));\n        },\n        focusedTime(updated, old){\n            timeParts.forEach((part, i) => {\n                if (updated[i] === old[i] || typeof updated[i] === 'undefined') return;\n                const valueIndex = this[`${part}List`].findIndex(obj => obj.text === updated[i]);\n                this.scroll(part, valueIndex);\n            });\n        }\n    },\n    mounted () {\n        this.$nextTick(() => this.compiled = true);\n    }\n};\n",{"version":3,"sources":["time-spinner.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAofile":"time-spinner.vue","sourceRoot":"node_modules/iview/src/components/date-picker/base","sourcesContent":["<template>\n    <div :class=\"classes\">\n        <div :class=\"[prefixCls+ '-list']\" ref=\"hours\">\n            <ul :class=\"[prefixCls + '-ul']\">\n                <li :class=\"getCellCls(item)\" v-for=\"item in hoursList\" v-show=\"!item.hide\" @click=\"handleClick('hours', item)\">{{ formatTime(item.text) }}</li>\n            </ul>\n        </div>\n        <div :class=\"[prefixCls+ '-list']\" ref=\"minutes\">\n            <ul :class=\"[prefixCls + '-ul']\">\n                <li :class=\"getCellCls(item)\" v-for=\"item in minutesList\" v-show=\"!item.hide\" @click=\"handleClick('minutes', item)\">{{ formatTime(item.text) }}</li>\n            </ul>\n        </div>\n        <div :class=\"[prefixCls+ '-list']\" v-show=\"showSeconds\" ref=\"seconds\">\n            <ul :class=\"[prefixCls + '-ul']\">\n                <li :class=\"getCellCls(item)\" v-for=\"item in secondsList\" v-show=\"!item.hide\" @click=\"handleClick('seconds', item)\">{{ formatTime(item.text) }}</li>\n            </ul>\n        </div>\n    </div>\n</template>\n<script>\n    import Options from '../time-mixins';\n    import { deepCopy, scrollTop, firstUpperCase } from '../../../utils/assist';\n\n    const prefixCls = 'ivu-time-picker-cells';\n    const timeParts = ['hours', 'minutes', 'seconds'];\n\n    export default {\n        name: 'TimeSpinner',\n        mixins: [Options],\n        props: {\n            hours: {\n                type: [Number, String],\n                default: NaN\n            },\n            minutes: {\n                type: [Number, String],\n                default: NaN\n            },\n            seconds: {\n                type: [Number, String],\n                default: NaN\n            },\n            showSeconds: {\n                type: Boolean,\n                default: true\n            },\n            steps: {\n                type: Array,\n                default: () => []\n            }\n        },\n        data () {\n            return {\n                spinerSteps: [1, 1, 1].map((one, i) => Math.abs(this.steps[i]) || one),\n                prefixCls: prefixCls,\n                compiled: false,\n                focusedColumn: -1, // which column inside the picker\n                focusedTime: [0, 0, 0] // the values array into [hh, mm, ss]\n            };\n        },\n        computed: {\n            classes () {\n                return [\n                    `${prefixCls}`,\n                    {\n                        [`${prefixCls}-with-seconds`]: this.showSeconds\n                    }\n                ];\n            },\n            hoursList () {\n                let hours = [];\n                const step = this.spinerSteps[0];\n                const focusedHour = this.focusedColumn === 0 && this.focusedTime[0];\n                const hour_tmpl = {\n                    text: 0,\n                    selected: false,\n                    disabled: false,\n                    hide: false\n                };\n\n                for (let i = 0; i < 24; i += step) {\n                    const hour = deepCopy(hour_tmpl);\n                    hour.text = i;\n                    hour.focused = i === focusedHour;\n\n                    if (this.disabledHours.length && this.disabledHours.indexOf(i) > -1) {\n                        hour.disabled = true;\n                        if (this.hideDisabledOptions) hour.hide = true;\n                    }\n                    if (this.hours === i) hour.selected = true;\n                    hours.push(hour);\n                }\n\n                return hours;\n            },\n            minutesList () {\n                let minutes = [];\n                const step = this.spinerSteps[1];\n                const focusedMinute = this.focusedColumn === 1 && this.focusedTime[1];\n                const minute_tmpl = {\n                    text: 0,\n                    selected: false,\n                    disabled: false,\n                    hide: false\n                };\n\n                for (let i = 0; i < 60; i += step) {\n                    const minute = deepCopy(minute_tmpl);\n                    minute.text = i;\n                    minute.focused = i === focusedMinute;\n\n                    if (this.disabledMinutes.length && this.disabledMinutes.indexOf(i) > -1) {\n                        minute.disabled = true;\n                        if (this.hideDisabledOptions) minute.hide = true;\n                    }\n                    if (this.minutes === i) minute.selected = true;\n                    minutes.push(minute);\n                }\n                return minutes;\n            },\n            secondsList () {\n                let seconds = [];\n                const step = this.spinerSteps[2];\n                const focusedMinute = this.focusedColumn === 2 && this.focusedTime[2];\n                const second_tmpl = {\n                    text: 0,\n                    selected: false,\n                    disabled: false,\n                    hide: false\n                };\n\n                for (let i = 0; i < 60; i += step) {\n                    const second = deepCopy(second_tmpl);\n                    second.text = i;\n                    second.focused = i === focusedMinute;\n\n                    if (this.disabledSeconds.length && this.disabledSeconds.indexOf(i) > -1) {\n                        second.disabled = true;\n                        if (this.hideDisabledOptions) second.hide = true;\n                    }\n                    if (this.seconds === i) second.selected = true;\n                    seconds.push(second);\n                }\n\n                return seconds;\n            }\n        },\n        methods: {\n            getCellCls (cell) {\n                return [\n                    `${prefixCls}-cell`,\n                    {\n                        [`${prefixCls}-cell-selected`]: cell.selected,\n                        [`${prefixCls}-cell-focused`]: cell.focused,\n                        [`${prefixCls}-cell-disabled`]: cell.disabled\n\n                    }\n                ];\n            },\n            chooseValue(values){\n                const changes = timeParts.reduce((obj, part, i) => {\n                    const value = values[i];\n                    if (this[part] ===  value) return obj;\n                    return {\n                        ...obj,\n                        [part]: value\n                    };\n                }, {});\n                if (Object.keys(changes).length > 0) {\n                    this.emitChange(changes);\n                }\n            },\n            handleClick (type, cell) {\n                if (cell.disabled) return;\n                const data = {[type]: cell.text};\n                this.emitChange(data);\n            },\n            emitChange(changes){\n                this.$emit('on-change', changes);\n                this.$emit('on-pick-click');\n            },\n            scroll (type, index) {\n                const from = this.$refs[type].scrollTop;\n                const to = 24 * this.getScrollIndex(type, index);\n                scrollTop(this.$refs[type], from, to, 500);\n            },\n            getScrollIndex (type, index) {\n                const Type = firstUpperCase(type);\n                const disabled = this[`disabled${Type}`];\n                if (disabled.length && this.hideDisabledOptions) {\n                    let _count = 0;\n                    disabled.forEach(item => item <= index ? _count++ : '');\n                    index -= _count;\n                }\n                return index;\n            },\n            updateScroll () {\n                this.$nextTick(() => {\n                    timeParts.forEach(type => {\n                        this.$refs[type].scrollTop = 24 * this[`${type}List`].findIndex(obj => obj.text == this[type]);\n                    });\n                });\n            },\n            formatTime (text) {\n                return text < 10 ? '0' + text : text;\n            },\n            updateFocusedTime(col, time) {\n                this.focusedColumn = col;\n                this.focusedTime = time.slice();\n\n            }\n        },\n        watch: {\n            hours (val) {\n                if (!this.compiled) return;\n                this.scroll('hours', this.hoursList.findIndex(obj => obj.text == val));\n            },\n            minutes (val) {\n                if (!this.compiled) return;\n                this.scroll('minutes', this.minutesList.findIndex(obj => obj.text == val));\n            },\n            seconds (val) {\n                if (!this.compiled) return;\n                this.scroll('seconds', this.secondsList.findIndex(obj => obj.text == val));\n            },\n            focusedTime(updated, old){\n                timeParts.forEach((part, i) => {\n                    if (updated[i] === old[i] || typeof updated[i] === 'undefined') return;\n                    const valueIndex = this[`${part}List`].findIndex(obj => obj.text === updated[i]);\n                    this.scroll(part, valueIndex);\n                });\n            }\n        },\n        mounted () {\n            this.$nextTick(() => this.compiled = true);\n        }\n    };\n</script>\n"]}]}