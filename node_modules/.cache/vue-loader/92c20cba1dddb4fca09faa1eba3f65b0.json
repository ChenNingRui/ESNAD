{"remainingRequest":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/iview/src/components/select/dropdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/iview/src/components/select/dropdown.vue","mtime":1546852004000},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js","mtime":1561201328360},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/babel-loader/lib/index.js","mtime":1561201328233},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js","mtime":1561201328360},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/vue-loader/lib/index.js","mtime":1561201333247}],"contextDependencies":[],"result":["//\n//\n//\n\nimport Vue from 'vue';\nconst isServer = Vue.prototype.$isServer;\nimport { getStyle } from '../../utils/assist';\nconst Popper = isServer ? function() {} : require('popper.js/dist/umd/popper.js');  // eslint-disable-line\n\nimport { transferIndex, transferIncrease } from '../../utils/transfer-queue';\n\nexport default {\n    name: 'Drop',\n    props: {\n        placement: {\n            type: String,\n            default: 'bottom-start'\n        },\n        className: {\n            type: String\n        },\n        transfer: {\n            type: Boolean\n        }\n    },\n    data () {\n        return {\n            popper: null,\n            width: '',\n            popperStatus: false,\n            tIndex: this.handleGetIndex()\n        };\n    },\n    computed: {\n        styles () {\n            let style = {};\n            if (this.width) style.minWidth = `${this.width}px`;\n\n            if (this.transfer) style['z-index'] = 1060 + this.tIndex;\n\n            return style;\n        }\n    },\n    methods: {\n        update () {\n            if (isServer) return;\n            if (this.popper) {\n                this.$nextTick(() => {\n                    this.popper.update();\n                    this.popperStatus = true;\n                });\n            } else {\n                this.$nextTick(() => {\n                    this.popper = new Popper(this.$parent.$refs.reference, this.$el, {\n                        placement: this.placement,\n                        modifiers: {\n                            computeStyle:{\n                                gpuAcceleration: false\n                            },\n                            preventOverflow :{\n                                boundariesElement: 'window'\n                            }\n                        },\n                        onCreate:()=>{\n                            this.resetTransformOrigin();\n                            this.$nextTick(this.popper.update());\n                        },\n                        onUpdate:()=>{\n                            this.resetTransformOrigin();\n                        }\n                    });\n                });\n            }\n            // set a height for parent is Modal and Select's width is 100%\n            if (this.$parent.$options.name === 'iSelect') {\n                this.width = parseInt(getStyle(this.$parent.$el, 'width'));\n            }\n            this.tIndex = this.handleGetIndex();\n        },\n        destroy () {\n            if (this.popper) {\n                setTimeout(() => {\n                    if (this.popper && !this.popperStatus) {\n                        this.popper.destroy();\n                        this.popper = null;\n                    }\n                    this.popperStatus = false;\n                }, 300);\n            }\n        },\n        resetTransformOrigin() {\n            // 不判断，Select 会报错，不知道为什么\n            if (!this.popper) return;\n\n            let x_placement = this.popper.popper.getAttribute('x-placement');\n            let placementStart = x_placement.split('-')[0];\n            let placementEnd = x_placement.split('-')[1];\n            const leftOrRight = x_placement === 'left' || x_placement === 'right';\n            if(!leftOrRight){\n                this.popper.popper.style.transformOrigin = placementStart==='bottom' || ( placementStart !== 'top' && placementEnd === 'start') ? 'center top' : 'center bottom';\n            }\n        },\n        handleGetIndex () {\n            transferIncrease();\n            return transferIndex;\n        },\n    },\n    created () {\n        this.$on('on-update-popper', this.update);\n        this.$on('on-destroy-popper', this.destroy);\n    },\n    beforeDestroy () {\n        if (this.popper) {\n            this.popper.destroy();\n        }\n    }\n};\n",{"version":3,"sources":["dropdown.vue"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dropdown.vue","sourceRoot":"node_modules/iview/src/components/select","sourcesContent":["<template>\n    <div class=\"ivu-select-dropdown\" :class=\"className\" :style=\"styles\"><slot></slot></div>\n</template>\n<script>\n    import Vue from 'vue';\n    const isServer = Vue.prototype.$isServer;\n    import { getStyle } from '../../utils/assist';\n    const Popper = isServer ? function() {} : require('popper.js/dist/umd/popper.js');  // eslint-disable-line\n\n    import { transferIndex, transferIncrease } from '../../utils/transfer-queue';\n\n    export default {\n        name: 'Drop',\n        props: {\n            placement: {\n                type: String,\n                default: 'bottom-start'\n            },\n            className: {\n                type: String\n            },\n            transfer: {\n                type: Boolean\n            }\n        },\n        data () {\n            return {\n                popper: null,\n                width: '',\n                popperStatus: false,\n                tIndex: this.handleGetIndex()\n            };\n        },\n        computed: {\n            styles () {\n                let style = {};\n                if (this.width) style.minWidth = `${this.width}px`;\n\n                if (this.transfer) style['z-index'] = 1060 + this.tIndex;\n\n                return style;\n            }\n        },\n        methods: {\n            update () {\n                if (isServer) return;\n                if (this.popper) {\n                    this.$nextTick(() => {\n                        this.popper.update();\n                        this.popperStatus = true;\n                    });\n                } else {\n                    this.$nextTick(() => {\n                        this.popper = new Popper(this.$parent.$refs.reference, this.$el, {\n                            placement: this.placement,\n                            modifiers: {\n                                computeStyle:{\n                                    gpuAcceleration: false\n                                },\n                                preventOverflow :{\n                                    boundariesElement: 'window'\n                                }\n                            },\n                            onCreate:()=>{\n                                this.resetTransformOrigin();\n                                this.$nextTick(this.popper.update());\n                            },\n                            onUpdate:()=>{\n                                this.resetTransformOrigin();\n                            }\n                        });\n                    });\n                }\n                // set a height for parent is Modal and Select's width is 100%\n                if (this.$parent.$options.name === 'iSelect') {\n                    this.width = parseInt(getStyle(this.$parent.$el, 'width'));\n                }\n                this.tIndex = this.handleGetIndex();\n            },\n            destroy () {\n                if (this.popper) {\n                    setTimeout(() => {\n                        if (this.popper && !this.popperStatus) {\n                            this.popper.destroy();\n                            this.popper = null;\n                        }\n                        this.popperStatus = false;\n                    }, 300);\n                }\n            },\n            resetTransformOrigin() {\n                // 不判断，Select 会报错，不知道为什么\n                if (!this.popper) return;\n\n                let x_placement = this.popper.popper.getAttribute('x-placement');\n                let placementStart = x_placement.split('-')[0];\n                let placementEnd = x_placement.split('-')[1];\n                const leftOrRight = x_placement === 'left' || x_placement === 'right';\n                if(!leftOrRight){\n                    this.popper.popper.style.transformOrigin = placementStart==='bottom' || ( placementStart !== 'top' && placementEnd === 'start') ? 'center top' : 'center bottom';\n                }\n            },\n            handleGetIndex () {\n                transferIncrease();\n                return transferIndex;\n            },\n        },\n        created () {\n            this.$on('on-update-popper', this.update);\n            this.$on('on-destroy-popper', this.destroy);\n        },\n        beforeDestroy () {\n            if (this.popper) {\n                this.popper.destroy();\n            }\n        }\n    };\n</script>\n"]}]}