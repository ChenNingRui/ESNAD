{"remainingRequest":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/babel-loader/lib/index.js!/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/iview/src/components/date-picker/base/time-spinner.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/iview/src/components/date-picker/base/time-spinner.vue","mtime":1538018844000},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js","mtime":1561201328360},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/babel-loader/lib/index.js","mtime":1561201328233},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/cache-loader/dist/cjs.js","mtime":1561201328360},{"path":"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/vue-loader/lib/index.js","mtime":1561201333247}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _objectSpread from \"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/chenningrui/Desktop/Homework/ESNAD/ESNAD/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Options from \"../time-mixins\";\nimport { deepCopy, scrollTop, firstUpperCase } from \"../../../utils/assist\";\nvar prefixCls = 'ivu-time-picker-cells';\nvar timeParts = ['hours', 'minutes', 'seconds'];\nexport default {\n  name: 'TimeSpinner',\n  mixins: [Options],\n  props: {\n    hours: {\n      type: [Number, String],\n      default: NaN\n    },\n    minutes: {\n      type: [Number, String],\n      default: NaN\n    },\n    seconds: {\n      type: [Number, String],\n      default: NaN\n    },\n    showSeconds: {\n      type: Boolean,\n      default: true\n    },\n    steps: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      spinerSteps: [1, 1, 1].map(function (one, i) {\n        return Math.abs(_this.steps[i]) || one;\n      }),\n      prefixCls: prefixCls,\n      compiled: false,\n      focusedColumn: -1,\n      // which column inside the picker\n      focusedTime: [0, 0, 0] // the values array into [hh, mm, ss]\n\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return [\"\".concat(prefixCls), _defineProperty({}, \"\".concat(prefixCls, \"-with-seconds\"), this.showSeconds)];\n    },\n    hoursList: function hoursList() {\n      var hours = [];\n      var step = this.spinerSteps[0];\n      var focusedHour = this.focusedColumn === 0 && this.focusedTime[0];\n      var hour_tmpl = {\n        text: 0,\n        selected: false,\n        disabled: false,\n        hide: false\n      };\n\n      for (var i = 0; i < 24; i += step) {\n        var hour = deepCopy(hour_tmpl);\n        hour.text = i;\n        hour.focused = i === focusedHour;\n\n        if (this.disabledHours.length && this.disabledHours.indexOf(i) > -1) {\n          hour.disabled = true;\n          if (this.hideDisabledOptions) hour.hide = true;\n        }\n\n        if (this.hours === i) hour.selected = true;\n        hours.push(hour);\n      }\n\n      return hours;\n    },\n    minutesList: function minutesList() {\n      var minutes = [];\n      var step = this.spinerSteps[1];\n      var focusedMinute = this.focusedColumn === 1 && this.focusedTime[1];\n      var minute_tmpl = {\n        text: 0,\n        selected: false,\n        disabled: false,\n        hide: false\n      };\n\n      for (var i = 0; i < 60; i += step) {\n        var minute = deepCopy(minute_tmpl);\n        minute.text = i;\n        minute.focused = i === focusedMinute;\n\n        if (this.disabledMinutes.length && this.disabledMinutes.indexOf(i) > -1) {\n          minute.disabled = true;\n          if (this.hideDisabledOptions) minute.hide = true;\n        }\n\n        if (this.minutes === i) minute.selected = true;\n        minutes.push(minute);\n      }\n\n      return minutes;\n    },\n    secondsList: function secondsList() {\n      var seconds = [];\n      var step = this.spinerSteps[2];\n      var focusedMinute = this.focusedColumn === 2 && this.focusedTime[2];\n      var second_tmpl = {\n        text: 0,\n        selected: false,\n        disabled: false,\n        hide: false\n      };\n\n      for (var i = 0; i < 60; i += step) {\n        var second = deepCopy(second_tmpl);\n        second.text = i;\n        second.focused = i === focusedMinute;\n\n        if (this.disabledSeconds.length && this.disabledSeconds.indexOf(i) > -1) {\n          second.disabled = true;\n          if (this.hideDisabledOptions) second.hide = true;\n        }\n\n        if (this.seconds === i) second.selected = true;\n        seconds.push(second);\n      }\n\n      return seconds;\n    }\n  },\n  methods: {\n    getCellCls: function getCellCls(cell) {\n      var _ref2;\n\n      return [\"\".concat(prefixCls, \"-cell\"), (_ref2 = {}, _defineProperty(_ref2, \"\".concat(prefixCls, \"-cell-selected\"), cell.selected), _defineProperty(_ref2, \"\".concat(prefixCls, \"-cell-focused\"), cell.focused), _defineProperty(_ref2, \"\".concat(prefixCls, \"-cell-disabled\"), cell.disabled), _ref2)];\n    },\n    chooseValue: function chooseValue(values) {\n      var _this2 = this;\n\n      var changes = timeParts.reduce(function (obj, part, i) {\n        var value = values[i];\n        if (_this2[part] === value) return obj;\n        return _objectSpread({}, obj, _defineProperty({}, part, value));\n      }, {});\n\n      if (Object.keys(changes).length > 0) {\n        this.emitChange(changes);\n      }\n    },\n    handleClick: function handleClick(type, cell) {\n      if (cell.disabled) return;\n\n      var data = _defineProperty({}, type, cell.text);\n\n      this.emitChange(data);\n    },\n    emitChange: function emitChange(changes) {\n      this.$emit('on-change', changes);\n      this.$emit('on-pick-click');\n    },\n    scroll: function scroll(type, index) {\n      var from = this.$refs[type].scrollTop;\n      var to = 24 * this.getScrollIndex(type, index);\n      scrollTop(this.$refs[type], from, to, 500);\n    },\n    getScrollIndex: function getScrollIndex(type, index) {\n      var Type = firstUpperCase(type);\n      var disabled = this[\"disabled\".concat(Type)];\n\n      if (disabled.length && this.hideDisabledOptions) {\n        var _count = 0;\n        disabled.forEach(function (item) {\n          return item <= index ? _count++ : '';\n        });\n        index -= _count;\n      }\n\n      return index;\n    },\n    updateScroll: function updateScroll() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        timeParts.forEach(function (type) {\n          _this3.$refs[type].scrollTop = 24 * _this3[\"\".concat(type, \"List\")].findIndex(function (obj) {\n            return obj.text == _this3[type];\n          });\n        });\n      });\n    },\n    formatTime: function formatTime(text) {\n      return text < 10 ? '0' + text : text;\n    },\n    updateFocusedTime: function updateFocusedTime(col, time) {\n      this.focusedColumn = col;\n      this.focusedTime = time.slice();\n    }\n  },\n  watch: {\n    hours: function hours(val) {\n      if (!this.compiled) return;\n      this.scroll('hours', this.hoursList.findIndex(function (obj) {\n        return obj.text == val;\n      }));\n    },\n    minutes: function minutes(val) {\n      if (!this.compiled) return;\n      this.scroll('minutes', this.minutesList.findIndex(function (obj) {\n        return obj.text == val;\n      }));\n    },\n    seconds: function seconds(val) {\n      if (!this.compiled) return;\n      this.scroll('seconds', this.secondsList.findIndex(function (obj) {\n        return obj.text == val;\n      }));\n    },\n    focusedTime: function focusedTime(updated, old) {\n      var _this4 = this;\n\n      timeParts.forEach(function (part, i) {\n        if (updated[i] === old[i] || typeof updated[i] === 'undefined') return;\n\n        var valueIndex = _this4[\"\".concat(part, \"List\")].findIndex(function (obj) {\n          return obj.text === updated[i];\n        });\n\n        _this4.scroll(part, valueIndex);\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this5 = this;\n\n    this.$nextTick(function () {\n      return _this5.compiled = true;\n    });\n  }\n};",{"version":3,"sources":["time-spinner.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div :class=\"classes\">\n        <div :class=\"[prefixCls+ '-list']\" ref=\"hours\">\n            <ul :class=\"[prefixCls + '-ul']\">\n                <li :class=\"getCellCls(item)\" v-for=\"item in hoursList\" v-show=\"!item.hide\" @click=\"handleClick('hours', item)\">{{ formatTime(item.text) }}</li>\n            </ul>\n        </div>\n        <div :class=\"[prefixCls+ '-list']\" ref=\"minutes\">\n            <ul :class=\"[prefixCls + '-ul']\">\n                <li :class=\"getCellCls(item)\" v-for=\"item in minutesList\" v-show=\"!item.hide\" @click=\"handleClick('minutes', item)\">{{ formatTime(item.text) }}</li>\n            </ul>\n        </div>\n        <div :class=\"[prefixCls+ '-list']\" v-show=\"showSeconds\" ref=\"seconds\">\n            <ul :class=\"[prefixCls + '-ul']\">\n                <li :class=\"getCellCls(item)\" v-for=\"item in secondsList\" v-show=\"!item.hide\" @click=\"handleClick('seconds', item)\">{{ formatTime(item.text) }}</li>\n            </ul>\n        </div>\n    </div>\n</template>\n<script>\n    import Options from '../time-mixins';\n    import { deepCopy, scrollTop, firstUpperCase } from '../../../utils/assist';\n\n    const prefixCls = 'ivu-time-picker-cells';\n    const timeParts = ['hours', 'minutes', 'seconds'];\n\n    export default {\n        name: 'TimeSpinner',\n        mixins: [Options],\n        props: {\n            hours: {\n                type: [Number, String],\n                default: NaN\n            },\n            minutes: {\n                type: [Number, String],\n                default: NaN\n            },\n            seconds: {\n                type: [Number, String],\n                default: NaN\n            },\n            showSeconds: {\n                type: Boolean,\n                default: true\n            },\n            steps: {\n                type: Array,\n                default: () => []\n            }\n        },\n        data () {\n            return {\n                spinerSteps: [1, 1, 1].map((one, i) => Math.abs(this.steps[i]) || one),\n                prefixCls: prefixCls,\n                compiled: false,\n                focusedColumn: -1, // which column inside the picker\n                focusedTime: [0, 0, 0] // the values array into [hh, mm, ss]\n            };\n        },\n        computed: {\n            classes () {\n                return [\n                    `${prefixCls}`,\n                    {\n                        [`${prefixCls}-with-seconds`]: this.showSeconds\n                    }\n                ];\n            },\n            hoursList () {\n                let hours = [];\n                const step = this.spinerSteps[0];\n                const focusedHour = this.focusedColumn === 0 && this.focusedTime[0];\n                const hour_tmpl = {\n                    text: 0,\n                    selected: false,\n                    disabled: false,\n                    hide: false\n                };\n\n                for (let i = 0; i < 24; i += step) {\n                    const hour = deepCopy(hour_tmpl);\n                    hour.text = i;\n                    hour.focused = i === focusedHour;\n\n                    if (this.disabledHours.length && this.disabledHours.indexOf(i) > -1) {\n                        hour.disabled = true;\n                        if (this.hideDisabledOptions) hour.hide = true;\n                    }\n                    if (this.hours === i) hour.selected = true;\n                    hours.push(hour);\n                }\n\n                return hours;\n            },\n            minutesList () {\n                let minutes = [];\n                const step = this.spinerSteps[1];\n                const focusedMinute = this.focusedColumn === 1 && this.focusedTime[1];\n                const minute_tmpl = {\n                    text: 0,\n                    selected: false,\n                    disabled: false,\n                    hide: false\n                };\n\n                for (let i = 0; i < 60; i += step) {\n                    const minute = deepCopy(minute_tmpl);\n                    minute.text = i;\n                    minute.focused = i === focusedMinute;\n\n                    if (this.disabledMinutes.length && this.disabledMinutes.indexOf(i) > -1) {\n                        minute.disabled = true;\n                        if (this.hideDisabledOptions) minute.hide = true;\n                    }\n                    if (this.minutes === i) minute.selected = true;\n                    minutes.push(minute);\n                }\n                return minutes;\n            },\n            secondsList () {\n                let seconds = [];\n                const step = this.spinerSteps[2];\n                const focusedMinute = this.focusedColumn === 2 && this.focusedTime[2];\n                const second_tmpl = {\n                    text: 0,\n                    selected: false,\n                    disabled: false,\n                    hide: false\n                };\n\n                for (let i = 0; i < 60; i += step) {\n                    const second = deepCopy(second_tmpl);\n                    second.text = i;\n                    second.focused = i === focusedMinute;\n\n                    if (this.disabledSeconds.length && this.disabledSeconds.indexOf(i) > -1) {\n                        second.disabled = true;\n                        if (this.hideDisabledOptions) second.hide = true;\n                    }\n                    if (this.seconds === i) second.selected = true;\n                    seconds.push(second);\n                }\n\n                return seconds;\n            }\n        },\n        methods: {\n            getCellCls (cell) {\n                return [\n                    `${prefixCls}-cell`,\n                    {\n                        [`${prefixCls}-cell-selected`]: cell.selected,\n                        [`${prefixCls}-cell-focused`]: cell.focused,\n                        [`${prefixCls}-cell-disabled`]: cell.disabled\n\n                    }\n                ];\n            },\n            chooseValue(values){\n                const changes = timeParts.reduce((obj, part, i) => {\n                    const value = values[i];\n                    if (this[part] ===  value) return obj;\n                    return {\n                        ...obj,\n                        [part]: value\n                    };\n                }, {});\n                if (Object.keys(changes).length > 0) {\n                    this.emitChange(changes);\n                }\n            },\n            handleClick (type, cell) {\n                if (cell.disabled) return;\n                const data = {[type]: cell.text};\n                this.emitChange(data);\n            },\n            emitChange(changes){\n                this.$emit('on-change', changes);\n                this.$emit('on-pick-click');\n            },\n            scroll (type, index) {\n                const from = this.$refs[type].scrollTop;\n                const to = 24 * this.getScrollIndex(type, index);\n                scrollTop(this.$refs[type], from, to, 500);\n            },\n            getScrollIndex (type, index) {\n                const Type = firstUpperCase(type);\n                const disabled = this[`disabled${Type}`];\n                if (disabled.length && this.hideDisabledOptions) {\n                    let _count = 0;\n                    disabled.forEach(item => item <= index ? _count++ : '');\n                    index -= _count;\n                }\n                return index;\n            },\n            updateScroll () {\n                this.$nextTick(() => {\n                    timeParts.forEach(type => {\n                        this.$refs[type].scrollTop = 24 * this[`${type}List`].findIndex(obj => obj.text == this[type]);\n                    });\n                });\n            },\n            formatTime (text) {\n                return text < 10 ? '0' + text : text;\n            },\n            updateFocusedTime(col, time) {\n                this.focusedColumn = col;\n                this.focusedTime = time.slice();\n\n            }\n        },\n        watch: {\n            hours (val) {\n                if (!this.compiled) return;\n                this.scroll('hours', this.hoursList.findIndex(obj => obj.text == val));\n            },\n            minutes (val) {\n                if (!this.compiled) return;\n                this.scroll('minutes', this.minutesList.findIndex(obj => obj.text == val));\n            },\n            seconds (val) {\n                if (!this.compiled) return;\n                this.scroll('seconds', this.secondsList.findIndex(obj => obj.text == val));\n            },\n            focusedTime(updated, old){\n                timeParts.forEach((part, i) => {\n                    if (updated[i] === old[i] || typeof updated[i] === 'undefined') return;\n                    const valueIndex = this[`${part}List`].findIndex(obj => obj.text === updated[i]);\n                    this.scroll(part, valueIndex);\n                });\n            }\n        },\n        mounted () {\n            this.$nextTick(() => this.compiled = true);\n        }\n    };\n</script>\n"],"sourceRoot":"node_modules/iview/src/components/date-picker/base"}]}